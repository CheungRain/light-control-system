{"ast":null,"code":"import router from \"@/router/index\";\nimport { ElMessage } from \"element-plus\";\nimport { onMounted, reactive, ref } from \"vue\";\nimport axios from \"@/plugins/axios\";\nexport default {\n  __name: 'ChatRoom',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const user = ref('');\n    let sender = ref('');\n    let sendMsg = ref('');\n    const options = reactive([]);\n    const account = sessionStorage.getItem(\"Account\");\n    const ws = new WebSocket(\"ws://192.168.1.11:1113/webSocket/\" + account);\n    let message = reactive({\n      fromWho: \"\",\n      toWho: \"\",\n      text: \"\",\n      date: new Date(),\n      nameSet: [\"tom\", \"john\"]\n    });\n    ws.onopen = function (evt) {\n      console.log(\"connect\");\n      const url = \"/onlineUsers\";\n      const data = {};\n      const config = {\n        params: {\n          account: account\n        }\n      };\n      axios.post(url, data, config).then(response => {\n        console.log(response.data);\n      });\n    };\n    const selectForm = ref('');\n    const fasong = () => {\n      message.fromWho = account;\n      message.text = \"hello\";\n      message.toWho = selectForm.value;\n      message.date = new Date();\n      ws.send(JSON.stringify(message));\n      //console.log(message)\n    };\n\n    ws.onmessage = function (evt) {\n      message = JSON.parse(evt.data);\n      //message.nameSet = JSON.parse(evt.data.nameSet)\n      //console.log(evt.data)\n      // sender = message.fromWho\n      // sendMsg = message.text\n      if (message.fromWho == \"system_connect_open\") {\n        ElMessage.info(message.text + \"上线了\");\n        // for(let valueAccount of message.nameSet) {\n        //   const newOption = { label: valueAccount, value: valueAccount }\n        //   options.push(newOption)\n        // }\n      }\n\n      if (message.fromWho == \"system_connect_close\") {\n        ElMessage.info(message.text + \"下线了\");\n        //   for (const option of options) {\n        //     const index = options.indexOf(option);\n        //     if (option.label === message.text) {\n        //       options.splice(index, 1);\n        //       selectForm.value = \"\"\n        //     }\n        //   }\n      }\n    };\n\n    ws.onclose = function (evt) {\n      console.log(\"close\");\n    };\n    const __returned__ = {\n      user,\n      get sender() {\n        return sender;\n      },\n      set sender(v) {\n        sender = v;\n      },\n      get sendMsg() {\n        return sendMsg;\n      },\n      set sendMsg(v) {\n        sendMsg = v;\n      },\n      options,\n      account,\n      ws,\n      get message() {\n        return message;\n      },\n      set message(v) {\n        message = v;\n      },\n      selectForm,\n      fasong,\n      get router() {\n        return router;\n      },\n      get ElMessage() {\n        return ElMessage;\n      },\n      onMounted,\n      reactive,\n      ref,\n      get axios() {\n        return axios;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["router","ElMessage","onMounted","reactive","ref","axios","user","sender","sendMsg","options","account","sessionStorage","getItem","ws","WebSocket","message","fromWho","toWho","text","date","Date","nameSet","onopen","evt","console","log","url","data","config","params","post","then","response","selectForm","fasong","value","send","JSON","stringify","onmessage","parse","info","onclose"],"sources":["D:/VUE/demo/src/views/ChatRoom.vue"],"sourcesContent":["<template>\r\n  <h1>{{account}}</h1>\r\n  <h1>{{user}}</h1>\r\n  <el-button @click=\"fasong\">发送</el-button>\r\n  <el-select v-model=\"selectForm\" placeholder=\"选择发送人\">\r\n    <el-option v-for=\"option in options\" :key=\"option.value\" :label=\"option.label\" :value=\"option.value\"></el-option>\r\n  </el-select>\r\n  <p>来自{{sender}}的消息{{sendMsg}}</p>\r\n</template>\r\n\r\n<script setup>\r\nimport router from \"@/router/index\";\r\nimport {ElMessage} from \"element-plus\"\r\nimport {onMounted, reactive, ref} from \"vue\"\r\nimport axios from \"@/plugins/axios\";\r\nconst user = ref('')\r\nlet sender = ref('')\r\nlet sendMsg = ref('')\r\nconst options = reactive([]);\r\nconst account = sessionStorage.getItem(\"Account\")\r\nconst ws = new WebSocket(\"ws://192.168.1.11:1113/webSocket/\"+account)\r\nlet message = reactive({\r\n  fromWho: \"\",\r\n  toWho: \"\",\r\n  text: \"\",\r\n  date: new Date(),\r\n  nameSet: [\"tom\",\"john\"]\r\n})\r\nws.onopen = function (evt){\r\n  console.log(\"connect\")\r\n  const url = \"/onlineUsers\"\r\n  const data = {}\r\n  const config = {\r\n    params: {\r\n      account: account\r\n    }\r\n  }\r\n  axios.post(url,data,config)\r\n      .then(response => {\r\n        console.log(response.data)\r\n      })\r\n}\r\nconst selectForm = ref('')\r\nconst fasong = () => {\r\n  message.fromWho = account\r\n  message.text = \"hello\"\r\n  message.toWho = selectForm.value\r\n  message.date = new Date()\r\n  ws.send(JSON.stringify(message))\r\n  //console.log(message)\r\n}\r\nws.onmessage = function (evt){\r\n  message = JSON.parse(evt.data)\r\n  //message.nameSet = JSON.parse(evt.data.nameSet)\r\n  //console.log(evt.data)\r\n  // sender = message.fromWho\r\n  // sendMsg = message.text\r\n  if(message.fromWho==\"system_connect_open\") {\r\n    ElMessage.info(message.text+\"上线了\")\r\n    // for(let valueAccount of message.nameSet) {\r\n    //   const newOption = { label: valueAccount, value: valueAccount }\r\n    //   options.push(newOption)\r\n    // }\r\n  }\r\n  if(message.fromWho==\"system_connect_close\") {\r\n    ElMessage.info(message.text+\"下线了\")\r\n  //   for (const option of options) {\r\n  //     const index = options.indexOf(option);\r\n  //     if (option.label === message.text) {\r\n  //       options.splice(index, 1);\r\n  //       selectForm.value = \"\"\r\n  //     }\r\n  //   }\r\n  }\r\n}\r\nws.onclose = function (evt){\r\n  console.log(\"close\")\r\n}\r\n</script>\r\n"],"mappings":"AAWA,OAAOA,MAAM,MAAM,gBAAgB;AACnC,SAAQC,SAAS,QAAO,cAAc;AACtC,SAAQC,SAAS,EAAEC,QAAQ,EAAEC,GAAG,QAAO,KAAK;AAC5C,OAAOC,KAAK,MAAM,iBAAiB;;;;;;;IACnC,MAAMC,IAAI,GAAGF,GAAG,CAAC,EAAE,CAAC;IACpB,IAAIG,MAAM,GAAGH,GAAG,CAAC,EAAE,CAAC;IACpB,IAAII,OAAO,GAAGJ,GAAG,CAAC,EAAE,CAAC;IACrB,MAAMK,OAAO,GAAGN,QAAQ,CAAC,EAAE,CAAC;IAC5B,MAAMO,OAAO,GAAGC,cAAc,CAACC,OAAO,CAAC,SAAS,CAAC;IACjD,MAAMC,EAAE,GAAG,IAAIC,SAAS,CAAC,mCAAmC,GAACJ,OAAO,CAAC;IACrE,IAAIK,OAAO,GAAGZ,QAAQ,CAAC;MACrBa,OAAO,EAAE,EAAE;MACXC,KAAK,EAAE,EAAE;MACTC,IAAI,EAAE,EAAE;MACRC,IAAI,EAAE,IAAIC,IAAI,CAAC,CAAC;MAChBC,OAAO,EAAE,CAAC,KAAK,EAAC,MAAM;IACxB,CAAC,CAAC;IACFR,EAAE,CAACS,MAAM,GAAG,UAAUC,GAAG,EAAC;MACxBC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;MACtB,MAAMC,GAAG,GAAG,cAAc;MAC1B,MAAMC,IAAI,GAAG,CAAC,CAAC;MACf,MAAMC,MAAM,GAAG;QACbC,MAAM,EAAE;UACNnB,OAAO,EAAEA;QACX;MACF,CAAC;MACDL,KAAK,CAACyB,IAAI,CAACJ,GAAG,EAACC,IAAI,EAACC,MAAM,CAAC,CACtBG,IAAI,CAACC,QAAQ,IAAI;QAChBR,OAAO,CAACC,GAAG,CAACO,QAAQ,CAACL,IAAI,CAAC;MAC5B,CAAC,CAAC;IACR,CAAC;IACD,MAAMM,UAAU,GAAG7B,GAAG,CAAC,EAAE,CAAC;IAC1B,MAAM8B,MAAM,GAAGA,CAAA,KAAM;MACnBnB,OAAO,CAACC,OAAO,GAAGN,OAAO;MACzBK,OAAO,CAACG,IAAI,GAAG,OAAO;MACtBH,OAAO,CAACE,KAAK,GAAGgB,UAAU,CAACE,KAAK;MAChCpB,OAAO,CAACI,IAAI,GAAG,IAAIC,IAAI,CAAC,CAAC;MACzBP,EAAE,CAACuB,IAAI,CAACC,IAAI,CAACC,SAAS,CAACvB,OAAO,CAAC,CAAC;MAChC;IACF,CAAC;;IACDF,EAAE,CAAC0B,SAAS,GAAG,UAAUhB,GAAG,EAAC;MAC3BR,OAAO,GAAGsB,IAAI,CAACG,KAAK,CAACjB,GAAG,CAACI,IAAI,CAAC;MAC9B;MACA;MACA;MACA;MACA,IAAGZ,OAAO,CAACC,OAAO,IAAE,qBAAqB,EAAE;QACzCf,SAAS,CAACwC,IAAI,CAAC1B,OAAO,CAACG,IAAI,GAAC,KAAK,CAAC;QAClC;QACA;QACA;QACA;MACF;;MACA,IAAGH,OAAO,CAACC,OAAO,IAAE,sBAAsB,EAAE;QAC1Cf,SAAS,CAACwC,IAAI,CAAC1B,OAAO,CAACG,IAAI,GAAC,KAAK,CAAC;QACpC;QACA;QACA;QACA;QACA;QACA;QACA;MACA;IACF,CAAC;;IACDL,EAAE,CAAC6B,OAAO,GAAG,UAAUnB,GAAG,EAAC;MACzBC,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;IACtB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}