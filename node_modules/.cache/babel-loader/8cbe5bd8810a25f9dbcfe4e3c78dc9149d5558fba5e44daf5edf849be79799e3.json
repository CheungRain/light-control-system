{"ast":null,"code":"import axios from 'axios';\nimport router from \"@/router/index\";\nconst request = axios.create({\n  baseURL: `http://localhost:1111`,\n  timeout: 30000,\n  withCredentials: true //设置跨域携带cookie\n});\n\n// request 拦截器\n// 可以自请求发送前对请求做一些处理\n// 比如统一加token，对请求参数统一加密\nrequest.interceptors.request.use(config => {\n  config.headers['Content-Type'] = 'application/json;charset=utf-8';\n  // let token = sessionStorage.getItem(\"token\") ? sessionStorage.getItem(\"token\") : null\n  // if (token) {\n  //     config.headers['token'] = token;  // 设置请求头\n  // }\n\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// response 拦截器\n// 可以在接口响应后统一处理结果\nrequest.interceptors.response.use(response => {\n  let res = response.data;\n  // 如果是返回的文件\n  if (response.config.responseType === 'blob') {\n    return res;\n  }\n  // 兼容服务端返回的字符串数据\n  if (typeof res === 'string') {\n    res = res ? JSON.parse(res) : res;\n  }\n  // 当权限验证不通过的时候给出提示\n  if (res.code === 401) {\n    ElementUI.Message({\n      message: res.msg,\n      type: 'error'\n    });\n    router.replace(\"/login\");\n  }\n  return res;\n}, error => {\n  console.log('err' + error); // for debug\n  return Promise.reject(error);\n});\nexport default request;","map":{"version":3,"names":["axios","router","request","create","baseURL","timeout","withCredentials","interceptors","use","config","headers","error","Promise","reject","response","res","data","responseType","JSON","parse","code","ElementUI","Message","message","msg","type","replace","console","log"],"sources":["D:/VUE/demo/src/plugins/axios.js"],"sourcesContent":["import axios from 'axios'\r\nimport router from \"@/router/index\";\r\n\r\nconst request = axios.create({\r\n    baseURL: `http://localhost:1111`,\r\n    timeout: 30000,\r\n    withCredentials:true    //设置跨域携带cookie\r\n})\r\n\r\n// request 拦截器\r\n// 可以自请求发送前对请求做一些处理\r\n// 比如统一加token，对请求参数统一加密\r\nrequest.interceptors.request.use(config => {\r\n    config.headers['Content-Type'] = 'application/json;charset=utf-8';\r\n    // let token = sessionStorage.getItem(\"token\") ? sessionStorage.getItem(\"token\") : null\r\n    // if (token) {\r\n    //     config.headers['token'] = token;  // 设置请求头\r\n    // }\r\n\r\n    return config\r\n}, error => {\r\n    return Promise.reject(error)\r\n});\r\n\r\n// response 拦截器\r\n// 可以在接口响应后统一处理结果\r\nrequest.interceptors.response.use(\r\n    response => {\r\n        let res = response.data;\r\n        // 如果是返回的文件\r\n        if (response.config.responseType === 'blob') {\r\n            return res\r\n        }\r\n        // 兼容服务端返回的字符串数据\r\n        if (typeof res === 'string') {\r\n            res = res ? JSON.parse(res) : res\r\n        }\r\n        // 当权限验证不通过的时候给出提示\r\n        if (res.code === 401) {\r\n            ElementUI.Message({\r\n                message: res.msg,\r\n                type: 'error'\r\n            });\r\n            router.replace(\"/login\")\r\n        }\r\n        return res;\r\n    },\r\n    error => {\r\n        console.log('err' + error) // for debug\r\n        return Promise.reject(error)\r\n    }\r\n)\r\n\r\n\r\nexport default request\r\n\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,gBAAgB;AAEnC,MAAMC,OAAO,GAAGF,KAAK,CAACG,MAAM,CAAC;EACzBC,OAAO,EAAG,uBAAsB;EAChCC,OAAO,EAAE,KAAK;EACdC,eAAe,EAAC,IAAI,CAAI;AAC5B,CAAC,CAAC;;AAEF;AACA;AACA;AACAJ,OAAO,CAACK,YAAY,CAACL,OAAO,CAACM,GAAG,CAACC,MAAM,IAAI;EACvCA,MAAM,CAACC,OAAO,CAAC,cAAc,CAAC,GAAG,gCAAgC;EACjE;EACA;EACA;EACA;;EAEA,OAAOD,MAAM;AACjB,CAAC,EAAEE,KAAK,IAAI;EACR,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CAAC,CAAC;;AAEF;AACA;AACAT,OAAO,CAACK,YAAY,CAACO,QAAQ,CAACN,GAAG,CAC7BM,QAAQ,IAAI;EACR,IAAIC,GAAG,GAAGD,QAAQ,CAACE,IAAI;EACvB;EACA,IAAIF,QAAQ,CAACL,MAAM,CAACQ,YAAY,KAAK,MAAM,EAAE;IACzC,OAAOF,GAAG;EACd;EACA;EACA,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;IACzBA,GAAG,GAAGA,GAAG,GAAGG,IAAI,CAACC,KAAK,CAACJ,GAAG,CAAC,GAAGA,GAAG;EACrC;EACA;EACA,IAAIA,GAAG,CAACK,IAAI,KAAK,GAAG,EAAE;IAClBC,SAAS,CAACC,OAAO,CAAC;MACdC,OAAO,EAAER,GAAG,CAACS,GAAG;MAChBC,IAAI,EAAE;IACV,CAAC,CAAC;IACFxB,MAAM,CAACyB,OAAO,CAAC,QAAQ,CAAC;EAC5B;EACA,OAAOX,GAAG;AACd,CAAC,EACDJ,KAAK,IAAI;EACLgB,OAAO,CAACC,GAAG,CAAC,KAAK,GAAGjB,KAAK,CAAC,EAAC;EAC3B,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CACJ,CAAC;AAGD,eAAeT,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}