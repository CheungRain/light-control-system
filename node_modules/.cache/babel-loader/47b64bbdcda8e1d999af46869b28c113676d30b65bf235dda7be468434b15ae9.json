{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"button\", {\n    onClick: $setup.toggleLight\n  }, _toDisplayString($setup.isLightOn ? '关闭灯' : '打开灯'), 1 /* TEXT */), _createElementVNode(\"div\", null, _toDisplayString($setup.message), 1 /* TEXT */)]);\n}","map":{"version":3,"names":["_createElementBlock","_createElementVNode","onClick","$setup","toggleLight","_toDisplayString","isLightOn","message"],"sources":["D:\\javafile\\LightControl\\src\\views\\IndexPage.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <button @click=\"toggleLight\">{{ isLightOn ? '关闭灯' : '打开灯' }}</button>\r\n    <div>{{ message }}</div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted, onUnmounted } from 'vue';\r\n\r\nlet recognition;\r\nlet isListening = ref(false);\r\nlet message = ref('');\r\nlet isLightOn = ref(false);\r\n\r\nconst toggleLight = () => {\r\n  isLightOn.value = !isLightOn.value;\r\n  message.value = '';\r\n};\r\n\r\nconst startListening = () => {\r\n  recognition = new webspeechRecognition();\r\n  recognition.continuous = true;\r\n  recognition.interimResults = true;\r\n  recognition.lang = 'zh-CN';\r\n\r\n  recognition.onstart = () => {\r\n    isListening.value = true;\r\n  };\r\n\r\n  recognition.onend = () => {\r\n    isListening.value = false;\r\n    startListening(); // 重新启动语音识别\r\n  };\r\n\r\n  recognition.onresult = (event) => {\r\n    let transcript = '';\r\n\r\n    for (let i = event.resultIndex; i < event.results.length; ++i) {\r\n      if (event.results[i].isFinal) {\r\n        transcript += event.results[i][0].transcript;\r\n      }\r\n    }\r\n\r\n    if (transcript.includes('开灯')) {\r\n      isLightOn.value = true;\r\n      message.value = '已打开灯';\r\n    } else if (transcript.includes('关灯')) {\r\n      isLightOn.value = false;\r\n      message.value = '已关闭灯';\r\n    }\r\n  };\r\n\r\n  recognition.start();\r\n};\r\n\r\nconst stopListening = () => {\r\n  if (recognition) {\r\n    recognition.stop();\r\n    recognition = null;\r\n  }\r\n};\r\n\r\nonMounted(() => {\r\n  startListening();\r\n});\r\n\r\nonUnmounted(() => {\r\n  stopListening();\r\n});\r\n</script>"],"mappings":";;uBACEA,mBAAA,CAGM,cAFJC,mBAAA,CAAqE;IAA5DC,OAAK,EAAEC,MAAA,CAAAC;EAAW,GAAAC,gBAAA,CAAKF,MAAA,CAAAG,SAAS,kCACzCL,mBAAA,CAAwB,aAAAI,gBAAA,CAAhBF,MAAA,CAAAI,OAAO,iB"},"metadata":{},"sourceType":"module","externalDependencies":[]}