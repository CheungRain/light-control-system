{"ast":null,"code":"import { ref, onMounted, onUnmounted } from 'vue';\nexport default {\n  __name: 'IndexPage',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    let recognition;\n    let isListening = ref(false);\n    let message = ref('');\n    let isLightOn = ref(false);\n    const toggleLight = () => {\n      isLightOn.value = !isLightOn.value;\n      message.value = '';\n    };\n    const startListening = () => {\n      recognition = new webspeechRecognition();\n      recognition.continuous = true;\n      recognition.interimResults = true;\n      recognition.lang = 'zh-CN';\n      recognition.onstart = () => {\n        isListening.value = true;\n      };\n      recognition.onend = () => {\n        isListening.value = false;\n        startListening(); // 重新启动语音识别\n      };\n\n      recognition.onresult = event => {\n        let transcript = '';\n        for (let i = event.resultIndex; i < event.results.length; ++i) {\n          if (event.results[i].isFinal) {\n            transcript += event.results[i][0].transcript;\n          }\n        }\n        if (transcript.includes('开灯')) {\n          isLightOn.value = true;\n          message.value = '已打开灯';\n        } else if (transcript.includes('关灯')) {\n          isLightOn.value = false;\n          message.value = '已关闭灯';\n        }\n      };\n      recognition.start();\n    };\n    const stopListening = () => {\n      if (recognition) {\n        recognition.stop();\n        recognition = null;\n      }\n    };\n    onMounted(() => {\n      startListening();\n    });\n    onUnmounted(() => {\n      stopListening();\n    });\n    const __returned__ = {\n      get recognition() {\n        return recognition;\n      },\n      set recognition(v) {\n        recognition = v;\n      },\n      get isListening() {\n        return isListening;\n      },\n      set isListening(v) {\n        isListening = v;\n      },\n      get message() {\n        return message;\n      },\n      set message(v) {\n        message = v;\n      },\n      get isLightOn() {\n        return isLightOn;\n      },\n      set isLightOn(v) {\n        isLightOn = v;\n      },\n      toggleLight,\n      startListening,\n      stopListening,\n      ref,\n      onMounted,\n      onUnmounted\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","onUnmounted","recognition","isListening","message","isLightOn","toggleLight","value","startListening","webspeechRecognition","continuous","interimResults","lang","onstart","onend","onresult","event","transcript","i","resultIndex","results","length","isFinal","includes","start","stopListening","stop"],"sources":["D:/javafile/LightControl/src/views/IndexPage.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <button @click=\"toggleLight\">{{ isLightOn ? '关闭灯' : '打开灯' }}</button>\r\n    <div>{{ message }}</div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted, onUnmounted } from 'vue';\r\n\r\nlet recognition;\r\nlet isListening = ref(false);\r\nlet message = ref('');\r\nlet isLightOn = ref(false);\r\n\r\nconst toggleLight = () => {\r\n  isLightOn.value = !isLightOn.value;\r\n  message.value = '';\r\n};\r\n\r\nconst startListening = () => {\r\n  recognition = new webspeechRecognition();\r\n  recognition.continuous = true;\r\n  recognition.interimResults = true;\r\n  recognition.lang = 'zh-CN';\r\n\r\n  recognition.onstart = () => {\r\n    isListening.value = true;\r\n  };\r\n\r\n  recognition.onend = () => {\r\n    isListening.value = false;\r\n    startListening(); // 重新启动语音识别\r\n  };\r\n\r\n  recognition.onresult = (event) => {\r\n    let transcript = '';\r\n\r\n    for (let i = event.resultIndex; i < event.results.length; ++i) {\r\n      if (event.results[i].isFinal) {\r\n        transcript += event.results[i][0].transcript;\r\n      }\r\n    }\r\n\r\n    if (transcript.includes('开灯')) {\r\n      isLightOn.value = true;\r\n      message.value = '已打开灯';\r\n    } else if (transcript.includes('关灯')) {\r\n      isLightOn.value = false;\r\n      message.value = '已关闭灯';\r\n    }\r\n  };\r\n\r\n  recognition.start();\r\n};\r\n\r\nconst stopListening = () => {\r\n  if (recognition) {\r\n    recognition.stop();\r\n    recognition = null;\r\n  }\r\n};\r\n\r\nonMounted(() => {\r\n  startListening();\r\n});\r\n\r\nonUnmounted(() => {\r\n  stopListening();\r\n});\r\n</script>"],"mappings":"AAQA,SAASA,GAAG,EAAEC,SAAS,EAAEC,WAAW,QAAQ,KAAK;;;;;;;IAEjD,IAAIC,WAAW;IACf,IAAIC,WAAW,GAAGJ,GAAG,CAAC,KAAK,CAAC;IAC5B,IAAIK,OAAO,GAAGL,GAAG,CAAC,EAAE,CAAC;IACrB,IAAIM,SAAS,GAAGN,GAAG,CAAC,KAAK,CAAC;IAE1B,MAAMO,WAAW,GAAGA,CAAA,KAAM;MACxBD,SAAS,CAACE,KAAK,GAAG,CAACF,SAAS,CAACE,KAAK;MAClCH,OAAO,CAACG,KAAK,GAAG,EAAE;IACpB,CAAC;IAED,MAAMC,cAAc,GAAGA,CAAA,KAAM;MAC3BN,WAAW,GAAG,IAAIO,oBAAoB,CAAC,CAAC;MACxCP,WAAW,CAACQ,UAAU,GAAG,IAAI;MAC7BR,WAAW,CAACS,cAAc,GAAG,IAAI;MACjCT,WAAW,CAACU,IAAI,GAAG,OAAO;MAE1BV,WAAW,CAACW,OAAO,GAAG,MAAM;QAC1BV,WAAW,CAACI,KAAK,GAAG,IAAI;MAC1B,CAAC;MAEDL,WAAW,CAACY,KAAK,GAAG,MAAM;QACxBX,WAAW,CAACI,KAAK,GAAG,KAAK;QACzBC,cAAc,CAAC,CAAC,CAAC,CAAC;MACpB,CAAC;;MAEDN,WAAW,CAACa,QAAQ,GAAIC,KAAK,IAAK;QAChC,IAAIC,UAAU,GAAG,EAAE;QAEnB,KAAK,IAAIC,CAAC,GAAGF,KAAK,CAACG,WAAW,EAAED,CAAC,GAAGF,KAAK,CAACI,OAAO,CAACC,MAAM,EAAE,EAAEH,CAAC,EAAE;UAC7D,IAAIF,KAAK,CAACI,OAAO,CAACF,CAAC,CAAC,CAACI,OAAO,EAAE;YAC5BL,UAAU,IAAID,KAAK,CAACI,OAAO,CAACF,CAAC,CAAC,CAAC,CAAC,CAAC,CAACD,UAAU;UAC9C;QACF;QAEA,IAAIA,UAAU,CAACM,QAAQ,CAAC,IAAI,CAAC,EAAE;UAC7BlB,SAAS,CAACE,KAAK,GAAG,IAAI;UACtBH,OAAO,CAACG,KAAK,GAAG,MAAM;QACxB,CAAC,MAAM,IAAIU,UAAU,CAACM,QAAQ,CAAC,IAAI,CAAC,EAAE;UACpClB,SAAS,CAACE,KAAK,GAAG,KAAK;UACvBH,OAAO,CAACG,KAAK,GAAG,MAAM;QACxB;MACF,CAAC;MAEDL,WAAW,CAACsB,KAAK,CAAC,CAAC;IACrB,CAAC;IAED,MAAMC,aAAa,GAAGA,CAAA,KAAM;MAC1B,IAAIvB,WAAW,EAAE;QACfA,WAAW,CAACwB,IAAI,CAAC,CAAC;QAClBxB,WAAW,GAAG,IAAI;MACpB;IACF,CAAC;IAEDF,SAAS,CAAC,MAAM;MACdQ,cAAc,CAAC,CAAC;IAClB,CAAC,CAAC;IAEFP,WAAW,CAAC,MAAM;MAChBwB,aAAa,CAAC,CAAC;IACjB,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}