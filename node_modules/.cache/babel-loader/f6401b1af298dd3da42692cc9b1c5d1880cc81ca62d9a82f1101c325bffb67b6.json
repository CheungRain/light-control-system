{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_button = _resolveComponent(\"el-button\");\n  const _component_el_option = _resolveComponent(\"el-option\");\n  const _component_el_select = _resolveComponent(\"el-select\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"h1\", null, _toDisplayString($setup.account), 1 /* TEXT */), _createElementVNode(\"h1\", null, _toDisplayString($setup.user), 1 /* TEXT */), _createVNode(_component_el_button, {\n    onClick: $setup.fasong\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"发送\")]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_el_select, {\n    modelValue: _ctx.selectForm,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.selectForm = $event),\n    placeholder: \"选择发送人\"\n  }, {\n    default: _withCtx(() => [_createVNode(_component_el_option, {\n      label: \"tom\",\n      value: \"tom\"\n    }), _createVNode(_component_el_option, {\n      label: \"john\",\n      value: \"john\"\n    })]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"modelValue\"])], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_createElementVNode","_toDisplayString","$setup","account","user","_createVNode","_component_el_button","onClick","fasong","_component_el_select","_ctx","selectForm","$event","placeholder","_component_el_option","label","value"],"sources":["D:\\VUE\\demo\\src\\views\\ChatRoom.vue"],"sourcesContent":["<template>\r\n  <h1>{{account}}</h1>\r\n  <h1>{{user}}</h1>\r\n  <el-button @click=\"fasong\">发送</el-button>\r\n  <el-select v-model=\"selectForm\" placeholder=\"选择发送人\">\r\n    <el-option label=\"tom\" value=\"tom\"></el-option>\r\n    <el-option label=\"john\" value=\"john\"></el-option>\r\n  </el-select>\r\n</template>\r\n\r\n<script setup>\r\nimport router from \"@/router/index\";\r\nimport {ElMessage} from \"element-plus\"\r\nimport {onMounted, reactive, ref} from \"vue\"\r\nconst user = ref('')\r\nconst account = sessionStorage.getItem(\"Account\")\r\nconst ws = new WebSocket(\"ws://192.168.1.11:1113/webSocket/\"+account)\r\nlet message = reactive({\r\n  fromWho: \"\",\r\n  toWho: \"\",\r\n  text: \"\",\r\n  date: new Date()\r\n})\r\nws.onopen = function (evt){\r\n  console.log(\"connect\")\r\n}\r\nconst fasong = () => {\r\n  message.fromWho = account\r\n  message.text = \"hello\"\r\n\r\n\r\n  message.date = new Date()\r\n  ws.send(JSON.stringify(message))\r\n  //console.log(message)\r\n}\r\nws.onmessage = function (evt){\r\n  message = JSON.parse(evt.data)\r\n  console.log(message)\r\n  if(message.fromWho==\"system_connect_open\") {\r\n    ElMessage.info(message.text+\"上线了\")\r\n    user.value = message.text\r\n  }\r\n}\r\nws.onclose = function (evt){\r\n  console.log(\"close\")\r\n}\r\n</script>\r\n"],"mappings":";;;;;6DACEA,mBAAA,CAAoB,YAAAC,gBAAA,CAAdC,MAAA,CAAAC,OAAO,kBACbH,mBAAA,CAAiB,YAAAC,gBAAA,CAAXC,MAAA,CAAAE,IAAI,kBACVC,YAAA,CAAyCC,oBAAA;IAA7BC,OAAK,EAAEL,MAAA,CAAAM;EAAM;sBAAE,MAAE,C,iBAAF,IAAE,E;;MAC7BH,YAAA,CAGYI,oBAAA;gBAHQC,IAAA,CAAAC,UAAU;+DAAVD,IAAA,CAAAC,UAAU,GAAAC,MAAA;IAAEC,WAAW,EAAC;;sBAC1C,MAA+C,CAA/CR,YAAA,CAA+CS,oBAAA;MAApCC,KAAK,EAAC,KAAK;MAACC,KAAK,EAAC;QAC7BX,YAAA,CAAiDS,oBAAA;MAAtCC,KAAK,EAAC,MAAM;MAACC,KAAK,EAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}