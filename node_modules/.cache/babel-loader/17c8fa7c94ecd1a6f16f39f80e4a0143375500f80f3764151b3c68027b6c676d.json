{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"h2\", null, \"Mic Volume: \" + _toDisplayString($setup.micVolume), 1 /* TEXT */), _createElementVNode(\"button\", {\n    onClick: $setup.startDetection\n  }, \"Start Recording\"), _createElementVNode(\"button\", {\n    onClick: $setup.stopRecording\n  }, \"Stop Recording\")]);\n}","map":{"version":3,"names":["_createElementBlock","_createElementVNode","_toDisplayString","$setup","micVolume","onClick","startDetection","stopRecording"],"sources":["D:\\javafile\\LightControl\\src\\views\\IndexPage.vue"],"sourcesContent":["<script setup>\r\nimport { onMounted, ref } from 'vue';\r\nimport Recorder from 'js-audio-recorder';\r\n\r\nconst audioContext = new (window.AudioContext || window.webkitAudioContext)();\r\nconst analyser = audioContext.createAnalyser();\r\nanalyser.fftSize = 256;\r\nconst bufferLength = analyser.frequencyBinCount;\r\nconst dataArray = new Uint8Array(bufferLength);\r\nconst micVolume = ref(0);\r\nlet isRecording = false;\r\nlet audio = false;\r\n\r\nconst startDetection = () => {\r\n  if (!isRecording) {\r\n    isRecording = true;\r\n    detectVolume();\r\n  }\r\n};\r\n\r\nconst detectVolume = () => {\r\n  analyser.getByteFrequencyData(dataArray);\r\n  let sum = 0;\r\n  for (let i = 0; i < bufferLength; i++) {\r\n    sum += dataArray[i];\r\n  }\r\n  const volume = sum / bufferLength;\r\n  micVolume.value = volume;\r\n\r\n  if (volume > 50 && audio == false) {\r\n    RecordAudio();\r\n  }\r\n\r\n  if (isRecording) {\r\n    requestAnimationFrame(detectVolume);\r\n  }\r\n};\r\n\r\nonMounted(() => {\r\n  navigator.mediaDevices.getUserMedia({ audio: true })\r\n      .then(stream => {\r\n        const source = audioContext.createMediaStreamSource(stream);\r\n        source.connect(analyser);\r\n      })\r\n      .catch(err => {\r\n        console.error('Error getting user media:', err);\r\n      });\r\n});\r\n\r\nconst RecordAudio = () => {\r\n  const recorder = new Recorder({\r\n    bitRate: 128\r\n  });\r\n  recorder.start().then(() => {\r\n    console.log('Recording started');\r\n    audio = true;\r\n  }).catch(err => {\r\n    console.error('Error starting recording:', err);\r\n  });\r\n};\r\n\r\nconst stopRecording = () => {\r\n  isRecording = false;\r\n  audio = false;\r\n  micVolume.value = 0;\r\n  console.log('Recording stopped');\r\n};\r\n\r\n</script>\r\n\r\n<template>\r\n  <div>\r\n    <h2>Mic Volume: {{ micVolume }}</h2>\r\n    <button @click=\"startDetection\">Start Recording</button>\r\n    <button @click=\"stopRecording\">Stop Recording</button>\r\n  </div>\r\n</template>\r\n"],"mappings":";;uBAuEEA,mBAAA,CAIM,cAHJC,mBAAA,CAAoC,YAAhC,cAAY,GAAAC,gBAAA,CAAGC,MAAA,CAAAC,SAAS,kBAC5BH,mBAAA,CAAwD;IAA/CI,OAAK,EAAEF,MAAA,CAAAG;EAAc,GAAE,iBAAe,GAC/CL,mBAAA,CAAsD;IAA7CI,OAAK,EAAEF,MAAA,CAAAI;EAAa,GAAE,gBAAc,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}