{"ast":null,"code":"require(\"core-js/modules/es.array.push.js\");\nexports.config = (api, preset, rootOptions = {}) => {\n  const config = {\n    root: true,\n    env: {\n      node: true\n    },\n    extends: ['plugin:vue/essential'],\n    parserOptions: {\n      ecmaVersion: 2020\n    },\n    rules: {\n      'no-console': makeJSOnlyValue(`process.env.NODE_ENV === 'production' ? 'warn' : 'off'`),\n      'no-debugger': makeJSOnlyValue(`process.env.NODE_ENV === 'production' ? 'warn' : 'off'`)\n    }\n  };\n  if (api.hasPlugin('babel') && !api.hasPlugin('typescript')) {\n    config.parserOptions = {\n      parser: '@babel/eslint-parser'\n    };\n  }\n  if (preset === 'airbnb') {\n    config.extends.push('@vue/airbnb');\n  } else if (preset === 'standard') {\n    config.extends.push('@vue/standard');\n  } else if (preset === 'prettier') {\n    config.extends.push(...['eslint:recommended', 'plugin:prettier/recommended']);\n  } else {\n    // default\n    config.extends.push('eslint:recommended');\n  }\n  if (api.hasPlugin('typescript')) {\n    // typically, typescript ruleset should be appended to the end of the `extends` array\n    // but that is not the case for prettier, as there are conflicting rules\n    if (preset === 'prettier') {\n      config.extends.pop();\n      config.extends.push(...['@vue/typescript/recommended', 'plugin:prettier/recommended']);\n    } else {\n      config.extends.push('@vue/typescript/recommended');\n    }\n  }\n  if (rootOptions.vueVersion === '3') {\n    const updateConfig = cfg => cfg.replace(/plugin:vue\\/(essential|recommended|strongly-recommended)/gi, 'plugin:vue/vue3-$1');\n    config.extends = config.extends.map(updateConfig);\n  }\n  return config;\n};\n\n// __expression is a special flag that allows us to customize stringification\n// output when extracting configs into standalone files\nfunction makeJSOnlyValue(str) {\n  const fn = () => {};\n  fn.__expression = str;\n  return fn;\n}\nconst baseExtensions = ['.js', '.jsx', '.vue'];\nexports.extensions = api => api.hasPlugin('typescript') ? baseExtensions.concat('.ts', '.tsx') : baseExtensions;","map":{"version":3,"names":["exports","config","api","preset","rootOptions","root","env","node","extends","parserOptions","ecmaVersion","rules","makeJSOnlyValue","hasPlugin","parser","push","pop","vueVersion","updateConfig","cfg","replace","map","str","fn","__expression","baseExtensions","extensions","concat"],"sources":["D:/VUE/demo/node_modules/@vue/cli-plugin-eslint/eslintOptions.js"],"sourcesContent":["exports.config = (api, preset, rootOptions = {}) => {\n  const config = {\n    root: true,\n    env: { node: true },\n    extends: ['plugin:vue/essential'],\n    parserOptions: {\n      ecmaVersion: 2020\n    },\n    rules: {\n      'no-console': makeJSOnlyValue(`process.env.NODE_ENV === 'production' ? 'warn' : 'off'`),\n      'no-debugger': makeJSOnlyValue(`process.env.NODE_ENV === 'production' ? 'warn' : 'off'`)\n    }\n  }\n\n  if (api.hasPlugin('babel') && !api.hasPlugin('typescript')) {\n    config.parserOptions = {\n      parser: '@babel/eslint-parser'\n    }\n  }\n\n  if (preset === 'airbnb') {\n    config.extends.push('@vue/airbnb')\n  } else if (preset === 'standard') {\n    config.extends.push('@vue/standard')\n  } else if (preset === 'prettier') {\n    config.extends.push(...['eslint:recommended', 'plugin:prettier/recommended'])\n  } else {\n    // default\n    config.extends.push('eslint:recommended')\n  }\n\n  if (api.hasPlugin('typescript')) {\n    // typically, typescript ruleset should be appended to the end of the `extends` array\n    // but that is not the case for prettier, as there are conflicting rules\n    if (preset === 'prettier') {\n      config.extends.pop()\n      config.extends.push(...['@vue/typescript/recommended', 'plugin:prettier/recommended'])\n    } else {\n      config.extends.push('@vue/typescript/recommended')\n    }\n  }\n\n  if (rootOptions.vueVersion === '3') {\n    const updateConfig = cfg =>\n      cfg.replace(\n        /plugin:vue\\/(essential|recommended|strongly-recommended)/gi,\n        'plugin:vue/vue3-$1'\n      )\n    config.extends = config.extends.map(updateConfig)\n  }\n\n  return config\n}\n\n// __expression is a special flag that allows us to customize stringification\n// output when extracting configs into standalone files\nfunction makeJSOnlyValue (str) {\n  const fn = () => {}\n  fn.__expression = str\n  return fn\n}\n\nconst baseExtensions = ['.js', '.jsx', '.vue']\nexports.extensions = api => api.hasPlugin('typescript')\n  ? baseExtensions.concat('.ts', '.tsx')\n  : baseExtensions\n"],"mappings":";AAAAA,OAAO,CAACC,MAAM,GAAG,CAACC,GAAG,EAAEC,MAAM,EAAEC,WAAW,GAAG,CAAC,CAAC,KAAK;EAClD,MAAMH,MAAM,GAAG;IACbI,IAAI,EAAE,IAAI;IACVC,GAAG,EAAE;MAAEC,IAAI,EAAE;IAAK,CAAC;IACnBC,OAAO,EAAE,CAAC,sBAAsB,CAAC;IACjCC,aAAa,EAAE;MACbC,WAAW,EAAE;IACf,CAAC;IACDC,KAAK,EAAE;MACL,YAAY,EAAEC,eAAe,CAAE,wDAAuD,CAAC;MACvF,aAAa,EAAEA,eAAe,CAAE,wDAAuD;IACzF;EACF,CAAC;EAED,IAAIV,GAAG,CAACW,SAAS,CAAC,OAAO,CAAC,IAAI,CAACX,GAAG,CAACW,SAAS,CAAC,YAAY,CAAC,EAAE;IAC1DZ,MAAM,CAACQ,aAAa,GAAG;MACrBK,MAAM,EAAE;IACV,CAAC;EACH;EAEA,IAAIX,MAAM,KAAK,QAAQ,EAAE;IACvBF,MAAM,CAACO,OAAO,CAACO,IAAI,CAAC,aAAa,CAAC;EACpC,CAAC,MAAM,IAAIZ,MAAM,KAAK,UAAU,EAAE;IAChCF,MAAM,CAACO,OAAO,CAACO,IAAI,CAAC,eAAe,CAAC;EACtC,CAAC,MAAM,IAAIZ,MAAM,KAAK,UAAU,EAAE;IAChCF,MAAM,CAACO,OAAO,CAACO,IAAI,CAAC,GAAG,CAAC,oBAAoB,EAAE,6BAA6B,CAAC,CAAC;EAC/E,CAAC,MAAM;IACL;IACAd,MAAM,CAACO,OAAO,CAACO,IAAI,CAAC,oBAAoB,CAAC;EAC3C;EAEA,IAAIb,GAAG,CAACW,SAAS,CAAC,YAAY,CAAC,EAAE;IAC/B;IACA;IACA,IAAIV,MAAM,KAAK,UAAU,EAAE;MACzBF,MAAM,CAACO,OAAO,CAACQ,GAAG,CAAC,CAAC;MACpBf,MAAM,CAACO,OAAO,CAACO,IAAI,CAAC,GAAG,CAAC,6BAA6B,EAAE,6BAA6B,CAAC,CAAC;IACxF,CAAC,MAAM;MACLd,MAAM,CAACO,OAAO,CAACO,IAAI,CAAC,6BAA6B,CAAC;IACpD;EACF;EAEA,IAAIX,WAAW,CAACa,UAAU,KAAK,GAAG,EAAE;IAClC,MAAMC,YAAY,GAAGC,GAAG,IACtBA,GAAG,CAACC,OAAO,CACT,4DAA4D,EAC5D,oBACF,CAAC;IACHnB,MAAM,CAACO,OAAO,GAAGP,MAAM,CAACO,OAAO,CAACa,GAAG,CAACH,YAAY,CAAC;EACnD;EAEA,OAAOjB,MAAM;AACf,CAAC;;AAED;AACA;AACA,SAASW,eAAeA,CAAEU,GAAG,EAAE;EAC7B,MAAMC,EAAE,GAAGA,CAAA,KAAM,CAAC,CAAC;EACnBA,EAAE,CAACC,YAAY,GAAGF,GAAG;EACrB,OAAOC,EAAE;AACX;AAEA,MAAME,cAAc,GAAG,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,CAAC;AAC9CzB,OAAO,CAAC0B,UAAU,GAAGxB,GAAG,IAAIA,GAAG,CAACW,SAAS,CAAC,YAAY,CAAC,GACnDY,cAAc,CAACE,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,GACpCF,cAAc"},"metadata":{},"sourceType":"script","externalDependencies":[]}