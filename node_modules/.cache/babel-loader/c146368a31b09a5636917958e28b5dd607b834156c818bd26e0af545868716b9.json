{"ast":null,"code":"import Recorder from \"js-audio-recorder\";\nexport default {\n  __name: 'IndexPage',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const recorder = new Recorder({\n      sampleBits: 16,\n      // 采样位数，支持 8 或 16，默认是16\n      sampleRate: 16000,\n      // 采样率，支持 11025、16000、22050、24000、44100、48000，根据浏览器默认值，我的chrome是48000\n      numChannels: 1 // 声道，支持 1 或 2， 默认是1\n      // compiling: false,(0.x版本中生效,1.x增加中)  // 是否边录边转换，默认是false\n    });\n\n    const startRecordAudio = () => {\n      recorder.start();\n    };\n    const stopRecordAudio = () => {\n      console.log(\"停止录音\");\n      recorder.stop();\n    };\n    const playRecordAudio = () => {\n      console.log(\"播放录音\");\n      recorder.play();\n    };\n    const getPCBRecordAudioData = () => {\n      const pcmBlob = recorder.getPCMBlob();\n      console.log(pcmBlob);\n    };\n    const getWAVRecordAudioData = () => {\n      const wavBlob = recorder.getWAVBlob();\n      console.log(wavBlob);\n    };\n    const downloadPCBRecordAudioData = () => {\n      recorder.downloadPCM(\"badao\");\n    };\n    const downloadWAVRecordAudioData = () => {\n      recorder.downloadWAV(\"badao\");\n    };\n    const uploadWAVData = () => {\n      const wavBlob = recorder.getWAVBlob();\n      // 创建一个formData对象\n      const formData = new FormData();\n      // 此处获取到blob对象后需要设置fileName满足当前项目上传需求，其它项目可直接传把blob作为file塞入formData\n      const newbolb = new Blob([wavBlob], {\n        type: 'audio/wav'\n      });\n      //获取当时时间戳作为文件名\n      const fileOfBlob = new File([newbolb], new Date().getTime() + '.wav');\n      formData.append('file', fileOfBlob);\n    };\n    const __returned__ = {\n      recorder,\n      startRecordAudio,\n      stopRecordAudio,\n      playRecordAudio,\n      getPCBRecordAudioData,\n      getWAVRecordAudioData,\n      downloadPCBRecordAudioData,\n      downloadWAVRecordAudioData,\n      uploadWAVData,\n      get Recorder() {\n        return Recorder;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["Recorder","recorder","sampleBits","sampleRate","numChannels","startRecordAudio","start","stopRecordAudio","console","log","stop","playRecordAudio","play","getPCBRecordAudioData","pcmBlob","getPCMBlob","getWAVRecordAudioData","wavBlob","getWAVBlob","downloadPCBRecordAudioData","downloadPCM","downloadWAVRecordAudioData","downloadWAV","uploadWAVData","formData","FormData","newbolb","Blob","type","fileOfBlob","File","Date","getTime","append"],"sources":["D:/javafile/LightControl/src/views/IndexPage.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <el-button type=\"button\" @click=\"startRecordAudio\">开始录音</el-button>\r\n    <h3>录音时长：{{ recorder.duration.toFixed(4) }}</h3>\r\n    <br />\r\n    <el-button type=\"button\" @click=\"stopRecordAudio\">停止录音</el-button>\r\n    <el-button type=\"button\" @click=\"playRecordAudio\">播放录音</el-button>\r\n    <el-button type=\"button\" @click=\"getPCBRecordAudioData\"\r\n    >获取PCB录音数据</el-button\r\n    >\r\n    <el-button type=\"button\" @click=\"downloadPCBRecordAudioData\"\r\n    >下载PCB录音文件</el-button\r\n    >\r\n    <el-button type=\"button\" @click=\"getWAVRecordAudioData\"\r\n    >获取WAV录音数据</el-button\r\n    >\r\n    <el-button type=\"button\" @click=\"downloadWAVRecordAudioData\"\r\n    >下载WAV录音文件</el-button\r\n    >\r\n    <el-button type=\"button\" @click=\"uploadWAVData\">上传WAV录音数据</el-button>\r\n    <br />\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport Recorder from \"js-audio-recorder\";\r\nconst recorder = new Recorder({\r\n  sampleBits: 16, // 采样位数，支持 8 或 16，默认是16\r\n  sampleRate: 16000, // 采样率，支持 11025、16000、22050、24000、44100、48000，根据浏览器默认值，我的chrome是48000\r\n  numChannels: 1, // 声道，支持 1 或 2， 默认是1\r\n  // compiling: false,(0.x版本中生效,1.x增加中)  // 是否边录边转换，默认是false\r\n});\r\n\r\nconst startRecordAudio = () => {\r\n  recorder.start()\r\n}\r\n\r\nconst stopRecordAudio = () => {\r\n  console.log(\"停止录音\");\r\n  recorder.stop();\r\n}\r\n\r\nconst playRecordAudio = () => {\r\n  console.log(\"播放录音\");\r\n  recorder.play();\r\n}\r\n\r\nconst getPCBRecordAudioData = () => {\r\n  const pcmBlob = recorder.getPCMBlob();\r\n  console.log(pcmBlob);\r\n}\r\n\r\nconst getWAVRecordAudioData = () => {\r\n  const wavBlob = recorder.getWAVBlob();\r\n  console.log(wavBlob);\r\n}\r\n\r\nconst downloadPCBRecordAudioData = () => {\r\n  recorder.downloadPCM(\"badao\");\r\n}\r\n\r\nconst downloadWAVRecordAudioData = () => {\r\n  recorder.downloadWAV(\"badao\");\r\n}\r\n\r\nconst uploadWAVData = () => {\r\n  const wavBlob = recorder.getWAVBlob();\r\n  // 创建一个formData对象\r\n  const formData = new FormData()\r\n  // 此处获取到blob对象后需要设置fileName满足当前项目上传需求，其它项目可直接传把blob作为file塞入formData\r\n  const newbolb = new Blob([wavBlob], { type: 'audio/wav' })\r\n  //获取当时时间戳作为文件名\r\n  const fileOfBlob = new File([newbolb], new Date().getTime() + '.wav')\r\n  formData.append('file', fileOfBlob)\r\n}\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n</style>"],"mappings":"AAyBA,OAAOA,QAAQ,MAAM,mBAAmB;;;;;;;IACxC,MAAMC,QAAQ,GAAG,IAAID,QAAQ,CAAC;MAC5BE,UAAU,EAAE,EAAE;MAAE;MAChBC,UAAU,EAAE,KAAK;MAAE;MACnBC,WAAW,EAAE,CAAC,CAAE;MAChB;IACF,CAAC,CAAC;;IAEF,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;MAC7BJ,QAAQ,CAACK,KAAK,CAAC,CAAC;IAClB,CAAC;IAED,MAAMC,eAAe,GAAGA,CAAA,KAAM;MAC5BC,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;MACnBR,QAAQ,CAACS,IAAI,CAAC,CAAC;IACjB,CAAC;IAED,MAAMC,eAAe,GAAGA,CAAA,KAAM;MAC5BH,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;MACnBR,QAAQ,CAACW,IAAI,CAAC,CAAC;IACjB,CAAC;IAED,MAAMC,qBAAqB,GAAGA,CAAA,KAAM;MAClC,MAAMC,OAAO,GAAGb,QAAQ,CAACc,UAAU,CAAC,CAAC;MACrCP,OAAO,CAACC,GAAG,CAACK,OAAO,CAAC;IACtB,CAAC;IAED,MAAME,qBAAqB,GAAGA,CAAA,KAAM;MAClC,MAAMC,OAAO,GAAGhB,QAAQ,CAACiB,UAAU,CAAC,CAAC;MACrCV,OAAO,CAACC,GAAG,CAACQ,OAAO,CAAC;IACtB,CAAC;IAED,MAAME,0BAA0B,GAAGA,CAAA,KAAM;MACvClB,QAAQ,CAACmB,WAAW,CAAC,OAAO,CAAC;IAC/B,CAAC;IAED,MAAMC,0BAA0B,GAAGA,CAAA,KAAM;MACvCpB,QAAQ,CAACqB,WAAW,CAAC,OAAO,CAAC;IAC/B,CAAC;IAED,MAAMC,aAAa,GAAGA,CAAA,KAAM;MAC1B,MAAMN,OAAO,GAAGhB,QAAQ,CAACiB,UAAU,CAAC,CAAC;MACrC;MACA,MAAMM,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;MAC/B;MACA,MAAMC,OAAO,GAAG,IAAIC,IAAI,CAAC,CAACV,OAAO,CAAC,EAAE;QAAEW,IAAI,EAAE;MAAY,CAAC,CAAC;MAC1D;MACA,MAAMC,UAAU,GAAG,IAAIC,IAAI,CAAC,CAACJ,OAAO,CAAC,EAAE,IAAIK,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,GAAG,MAAM,CAAC;MACrER,QAAQ,CAACS,MAAM,CAAC,MAAM,EAAEJ,UAAU,CAAC;IACrC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}