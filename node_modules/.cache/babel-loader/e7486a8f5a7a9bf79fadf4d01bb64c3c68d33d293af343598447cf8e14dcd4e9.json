{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, normalizeClass as _normalizeClass, resolveComponent as _resolveComponent, createVNode as _createVNode, createTextVNode as _createTextVNode, withCtx as _withCtx, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"msg-con\"\n};\nconst _hoisted_2 = {\n  class: \"messages\"\n};\nconst _hoisted_3 = {\n  class: \"sender\"\n};\nconst _hoisted_4 = {\n  class: \"content\"\n};\nconst _hoisted_5 = {\n  class: \"input-container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_input = _resolveComponent(\"el-input\");\n  const _component_el_button = _resolveComponent(\"el-button\");\n  const _component_el_option = _resolveComponent(\"el-option\");\n  const _component_el_select = _resolveComponent(\"el-select\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createCommentVNode(\"  <div class=\\\"user-account\\\">当前用户: {{ account }}</div>\"), _createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.messages, msg => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: msg.id,\n      class: _normalizeClass([\"msg\", [msg.received ? 'received' : 'sent']])\n    }, [_createElementVNode(\"p\", _hoisted_3, _toDisplayString(msg.sender) + \"---\" + _toDisplayString(msg.time), 1 /* TEXT */), _createElementVNode(\"p\", _hoisted_4, _toDisplayString(msg.content), 1 /* TEXT */)], 2 /* CLASS */);\n  }), 128 /* KEYED_FRAGMENT */))])]), _createElementVNode(\"div\", _hoisted_5, [_createVNode(_component_el_input, {\n    class: \"input\",\n    modelValue: $setup.inputData,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.inputData = $event),\n    placeholder: \"请输入要发送的消息\"\n  }, null, 8 /* PROPS */, [\"modelValue\"]), _createVNode(_component_el_button, {\n    class: \"send-button\",\n    onClick: $setup.sendMessage\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"发送\")]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_el_select, {\n    class: \"select-form\",\n    modelValue: $setup.selectForm,\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $setup.selectForm = $event),\n    placeholder: \"选择发送人\"\n  }, {\n    default: _withCtx(() => [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.options, option => {\n      return _openBlock(), _createBlock(_component_el_option, {\n        key: option.value,\n        label: option.label,\n        value: option.value\n      }, null, 8 /* PROPS */, [\"label\", \"value\"]);\n    }), 128 /* KEYED_FRAGMENT */))]),\n\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"modelValue\"])])], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["class","_createCommentVNode","_createElementVNode","_hoisted_1","_hoisted_2","_createElementBlock","_Fragment","_renderList","$setup","messages","msg","key","id","_normalizeClass","received","_hoisted_3","_toDisplayString","sender","time","_hoisted_4","content","_hoisted_5","_createVNode","_component_el_input","inputData","$event","placeholder","_component_el_button","onClick","sendMessage","_component_el_select","selectForm","options","option","_createBlock","_component_el_option","value","label"],"sources":["D:\\VUE\\demo\\src\\views\\ChatRoom.vue"],"sourcesContent":["<template>\r\n<!--  <div class=\"user-account\">当前用户: {{ account }}</div>-->\r\n  <div class=\"msg-con\">\r\n  <div class=\"messages\">\r\n    <div v-for=\"msg in messages\" :key=\"msg.id\" class=\"msg\" :class=\"[msg.received ? 'received' : 'sent']\">\r\n      <p class=\"sender\">{{ msg.sender }}---{{ msg.time }}</p>\r\n      <p class=\"content\">{{ msg.content }}</p>\r\n    </div>\r\n  </div>\r\n  </div>\r\n  <div class=\"input-container\">\r\n    <el-input class=\"input\" v-model=\"inputData\" placeholder=\"请输入要发送的消息\" />\r\n    <el-button class=\"send-button\" @click=\"sendMessage\">发送</el-button>\r\n    <el-select class=\"select-form\" v-model=\"selectForm\" placeholder=\"选择发送人\">\r\n      <el-option v-for=\"option in options\" :key=\"option.value\" :label=\"option.label\" :value=\"option.value\" />\r\n    </el-select>\r\n  </div>\r\n</template>\r\n\r\n<style>\r\n.user-account {\r\n  font-size: 24px;\r\n  font-weight: bold;\r\n  color: #fff;\r\n  background-color: #333;\r\n  padding: 10px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.messages {\r\n  overflow-y: auto;\r\n  max-height:400px;\r\n  padding: 10px;\r\n}\r\n\r\n.msg {\r\n  background-color: #0099ff;\r\n  border-radius: 10px;\r\n  padding: 10px;\r\n  margin-bottom: 10px;\r\n  color: #fff;\r\n}\r\n\r\n.received {\r\n  background-color: #0099ff;\r\n  align-self: flex-end;\r\n  width: 50%;\r\n  max-width: 300px;\r\n}\r\n\r\n.sent {\r\n  background-color: #4caf68;\r\n  align-self: flex-end;\r\n  margin-left: auto;\r\n  width: 50%;\r\n  max-width: 400px;\r\n}\r\n.sender {\r\n  font-size: 12px;\r\n  font-weight: bold;\r\n  color: #fff;\r\n  margin: 0 0 5px;\r\n}\r\n\r\n.content {\r\n  font-size: 14px;\r\n  line-height: 1.5;\r\n  color: #fff;\r\n  margin: 5px 0;\r\n}\r\n\r\n.input-container {\r\n  /*display: flex;*/\r\n  align-items: center;\r\n  gap: 10px;\r\n  margin-top: 20px;\r\n}\r\n\r\n.input {\r\n  flex: 1;\r\n}\r\n\r\n.send-button {\r\n  width: 80px;\r\n  background-color: #ff4081;\r\n  color: #fff;\r\n  border: none;\r\n  border-radius: 5px;\r\n}\r\n\r\n.select-form {\r\n  width: 150px;\r\n  border: none;\r\n  border-radius: 5px;\r\n  background-color: #333;\r\n  color: #fff;\r\n}\r\n</style>\r\n\r\n<script setup>\r\nimport {ElMessage} from \"element-plus\"\r\nimport {onMounted, onUpdated, reactive, ref} from \"vue\"\r\nimport axios from \"@/plugins/axios\"\r\nconst options = reactive([])\r\nconst selectForm = ref('')\r\nconst inputData = ref('')\r\nconst account = sessionStorage.getItem(\"Account\")\r\nconst accountSet = new Set()\r\nlet message = reactive({\r\n  fromWho: \"\",\r\n  toWho: \"\",\r\n  text: \"\",\r\n  date: new Date()\r\n})\r\nconst sendMessage = () => {\r\n  message.fromWho = account\r\n  message.text = inputData.value\r\n  message.toWho = selectForm.value\r\n  message.date = new Date()\r\n  if(message.toWho&&message.text) {\r\n    ws.send(JSON.stringify(message))\r\n    const msg = {sender:account,time:message.date,content: message.text,received: false}\r\n    messages.push(msg)\r\n    inputData.value = \"\"\r\n  }\r\n}\r\nconst messages = reactive([])\r\nconst ws = new WebSocket(\"ws://192.168.1.11:1113/webSocket/\"+account)\r\n//连接建立时\r\nws.onopen = function (evt){\r\n  console.log(\"connect\")\r\n  const url = \"/onlineUsers\"\r\n  const data = {}\r\n  const config = {\r\n    params: {\r\n      account: account\r\n    }\r\n  }\r\n  axios.post(url,data,config)\r\n      .then(response => {\r\n        const nameSet = response.data\r\n        if(nameSet){\r\n          for(let valueAccount of nameSet) {\r\n            const newOption = {label: valueAccount,value: valueAccount}\r\n            if(!accountSet.has(valueAccount)){\r\n              options.push(newOption)\r\n              accountSet.add(valueAccount)\r\n            }\r\n          }\r\n        }\r\n      })\r\n}\r\n\r\n//接收到服务器消息时\r\nws.onmessage = function (evt){\r\n  message = JSON.parse(evt.data)\r\n  if(message.fromWho==\"system_connect_open\") {\r\n    if(message.text!=account) {\r\n      ElMessage.info(message.text + \"上线了\")\r\n      const newOption = {label: message.text, value: message.text}\r\n      if (!accountSet.has(message.text)) {\r\n        options.push(newOption)\r\n      }\r\n      accountSet.add(message.text)\r\n    }\r\n  }else if(message.fromWho==\"system_connect_close\") {\r\n    ElMessage.info(message.text+\"下线了\")\r\n    accountSet.delete(message.text)\r\n    for (const option of options) {\r\n      const index = options.indexOf(option);\r\n      if (option.label === message.text) {\r\n        options.splice(index,1);\r\n        selectForm.value = \"\"\r\n      }\r\n    }\r\n  }else{\r\n    const msg = {sender:message.fromWho,time:new Date(),content: message.text,received: true}\r\n    messages.push(msg)\r\n  }\r\n}\r\n//连接断开时\r\nws.onclose = function (evt){\r\n  console.log(\"close\")\r\n}\r\n//发生错误时\r\nws.onerror = function (evt){\r\n  console.log(\"error\")\r\n}\r\n\r\n</script>\r\n"],"mappings":";;EAEOA,KAAK,EAAC;AAAS;;EACfA,KAAK,EAAC;AAAU;;EAEdA,KAAK,EAAC;AAAQ;;EACdA,KAAK,EAAC;AAAS;;EAIjBA,KAAK,EAAC;AAAiB;;;;;;6DAT9BC,mBAAA,2DAA4D,EAC1DC,mBAAA,CAOM,OAPNC,UAOM,GANND,mBAAA,CAKM,OALNE,UAKM,I,kBAJJC,mBAAA,CAGMC,SAAA,QAAAC,WAAA,CAHaC,MAAA,CAAAC,QAAQ,EAAfC,GAAG;yBAAfL,mBAAA,CAGM;MAHwBM,GAAG,EAAED,GAAG,CAACE,EAAE;MAAEZ,KAAK,EAAAa,eAAA,EAAC,KAAK,GAAUH,GAAG,CAACI,QAAQ;QAC1EZ,mBAAA,CAAuD,KAAvDa,UAAuD,EAAAC,gBAAA,CAAlCN,GAAG,CAACO,MAAM,IAAG,KAAG,GAAAD,gBAAA,CAAGN,GAAG,CAACQ,IAAI,kBAChDhB,mBAAA,CAAwC,KAAxCiB,UAAwC,EAAAH,gBAAA,CAAlBN,GAAG,CAACU,OAAO,iB;sCAIrClB,mBAAA,CAMM,OANNmB,UAMM,GALJC,YAAA,CAAsEC,mBAAA;IAA5DvB,KAAK,EAAC,OAAO;gBAAUQ,MAAA,CAAAgB,SAAS;+DAAThB,MAAA,CAAAgB,SAAS,GAAAC,MAAA;IAAEC,WAAW,EAAC;2CACxDJ,YAAA,CAAkEK,oBAAA;IAAvD3B,KAAK,EAAC,aAAa;IAAE4B,OAAK,EAAEpB,MAAA,CAAAqB;;sBAAa,MAAE,C,iBAAF,IAAE,E;;MACtDP,YAAA,CAEYQ,oBAAA;IAFD9B,KAAK,EAAC,aAAa;gBAAUQ,MAAA,CAAAuB,UAAU;+DAAVvB,MAAA,CAAAuB,UAAU,GAAAN,MAAA;IAAEC,WAAW,EAAC;;sBACnD,MAAyB,E,kBAApCrB,mBAAA,CAAuGC,SAAA,QAAAC,WAAA,CAA3EC,MAAA,CAAAwB,OAAO,EAAjBC,MAAM;2BAAxBC,YAAA,CAAuGC,oBAAA;QAAjExB,GAAG,EAAEsB,MAAM,CAACG,KAAK;QAAGC,KAAK,EAAEJ,MAAM,CAACI,KAAK;QAAGD,KAAK,EAAEH,MAAM,CAACG"},"metadata":{},"sourceType":"module","externalDependencies":[]}