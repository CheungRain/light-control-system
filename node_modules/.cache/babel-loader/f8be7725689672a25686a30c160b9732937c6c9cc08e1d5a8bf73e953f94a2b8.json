{"ast":null,"code":"import \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.find-last.js\";\nimport \"core-js/modules/es.typed-array.find-last-index.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport { onMounted, ref } from 'vue';\nimport Recorder from 'js-audio-recorder';\nexport default {\n  __name: 'IndexPage',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n    const analyser = audioContext.createAnalyser();\n    analyser.fftSize = 256;\n    const bufferLength = analyser.frequencyBinCount;\n    const dataArray = new Uint8Array(bufferLength);\n    const micVolume = ref(0);\n    let isRecording = false;\n    let audio = false;\n    const startDetection = () => {\n      if (!isRecording) {\n        isRecording = true;\n        detectVolume();\n      }\n    };\n    const detectVolume = () => {\n      analyser.getByteFrequencyData(dataArray);\n      let sum = 0;\n      for (let i = 0; i < bufferLength; i++) {\n        sum += dataArray[i];\n      }\n      const volume = sum / bufferLength;\n      micVolume.value = volume;\n      if (volume > 50 && audio == false) {\n        RecordAudio();\n      }\n      if (isRecording) {\n        requestAnimationFrame(detectVolume);\n      }\n    };\n    onMounted(() => {\n      navigator.mediaDevices.getUserMedia({\n        audio: true\n      }).then(stream => {\n        const source = audioContext.createMediaStreamSource(stream);\n        source.connect(analyser);\n      }).catch(err => {\n        console.error('Error getting user media:', err);\n      });\n    });\n    const RecordAudio = () => {\n      const recorder = new Recorder({\n        bitRate: 128\n      });\n      recorder.start().then(() => {\n        console.log('Recording started');\n        audio = true;\n      }).catch(err => {\n        console.error('Error starting recording:', err);\n      });\n    };\n    const stopRecording = () => {\n      isRecording = false;\n      audio = false;\n      micVolume.value = 0;\n      console.log('Recording stopped');\n    };\n    const __returned__ = {\n      audioContext,\n      analyser,\n      bufferLength,\n      dataArray,\n      micVolume,\n      get isRecording() {\n        return isRecording;\n      },\n      set isRecording(v) {\n        isRecording = v;\n      },\n      get audio() {\n        return audio;\n      },\n      set audio(v) {\n        audio = v;\n      },\n      startDetection,\n      detectVolume,\n      RecordAudio,\n      stopRecording,\n      onMounted,\n      ref,\n      get Recorder() {\n        return Recorder;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["onMounted","ref","Recorder","audioContext","window","AudioContext","webkitAudioContext","analyser","createAnalyser","fftSize","bufferLength","frequencyBinCount","dataArray","Uint8Array","micVolume","isRecording","audio","startDetection","detectVolume","getByteFrequencyData","sum","i","volume","value","RecordAudio","requestAnimationFrame","navigator","mediaDevices","getUserMedia","then","stream","source","createMediaStreamSource","connect","catch","err","console","error","recorder","bitRate","start","log","stopRecording"],"sources":["D:/javafile/LightControl/src/views/IndexPage.vue"],"sourcesContent":["<script setup>\r\nimport { onMounted, ref } from 'vue';\r\nimport Recorder from 'js-audio-recorder';\r\n\r\nconst audioContext = new (window.AudioContext || window.webkitAudioContext)();\r\nconst analyser = audioContext.createAnalyser();\r\nanalyser.fftSize = 256;\r\nconst bufferLength = analyser.frequencyBinCount;\r\nconst dataArray = new Uint8Array(bufferLength);\r\nconst micVolume = ref(0);\r\nlet isRecording = false;\r\nlet audio = false;\r\n\r\nconst startDetection = () => {\r\n  if (!isRecording) {\r\n    isRecording = true;\r\n    detectVolume();\r\n  }\r\n};\r\n\r\nconst detectVolume = () => {\r\n  analyser.getByteFrequencyData(dataArray);\r\n  let sum = 0;\r\n  for (let i = 0; i < bufferLength; i++) {\r\n    sum += dataArray[i];\r\n  }\r\n  const volume = sum / bufferLength;\r\n  micVolume.value = volume;\r\n\r\n  if (volume > 50 && audio == false) {\r\n    RecordAudio();\r\n  }\r\n\r\n  if (isRecording) {\r\n    requestAnimationFrame(detectVolume);\r\n  }\r\n};\r\n\r\nonMounted(() => {\r\n  navigator.mediaDevices.getUserMedia({ audio: true })\r\n      .then(stream => {\r\n        const source = audioContext.createMediaStreamSource(stream);\r\n        source.connect(analyser);\r\n      })\r\n      .catch(err => {\r\n        console.error('Error getting user media:', err);\r\n      });\r\n});\r\n\r\nconst RecordAudio = () => {\r\n  const recorder = new Recorder({\r\n    bitRate: 128\r\n  });\r\n  recorder.start().then(() => {\r\n    console.log('Recording started');\r\n    audio = true;\r\n  }).catch(err => {\r\n    console.error('Error starting recording:', err);\r\n  });\r\n};\r\n\r\nconst stopRecording = () => {\r\n  isRecording = false;\r\n  audio = false;\r\n  micVolume.value = 0;\r\n  console.log('Recording stopped');\r\n};\r\n\r\n</script>\r\n\r\n<template>\r\n  <div>\r\n    <h2>Mic Volume: {{ micVolume }}</h2>\r\n    <button @click=\"startDetection\">Start Recording</button>\r\n    <button @click=\"stopRecording\">Stop Recording</button>\r\n  </div>\r\n</template>\r\n"],"mappings":";;;;;;;AACA,SAASA,SAAS,EAAEC,GAAG,QAAQ,KAAK;AACpC,OAAOC,QAAQ,MAAM,mBAAmB;;;;;;;IAExC,MAAMC,YAAY,GAAG,KAAKC,MAAM,CAACC,YAAY,IAAID,MAAM,CAACE,kBAAkB,EAAE,CAAC;IAC7E,MAAMC,QAAQ,GAAGJ,YAAY,CAACK,cAAc,CAAC,CAAC;IAC9CD,QAAQ,CAACE,OAAO,GAAG,GAAG;IACtB,MAAMC,YAAY,GAAGH,QAAQ,CAACI,iBAAiB;IAC/C,MAAMC,SAAS,GAAG,IAAIC,UAAU,CAACH,YAAY,CAAC;IAC9C,MAAMI,SAAS,GAAGb,GAAG,CAAC,CAAC,CAAC;IACxB,IAAIc,WAAW,GAAG,KAAK;IACvB,IAAIC,KAAK,GAAG,KAAK;IAEjB,MAAMC,cAAc,GAAGA,CAAA,KAAM;MAC3B,IAAI,CAACF,WAAW,EAAE;QAChBA,WAAW,GAAG,IAAI;QAClBG,YAAY,CAAC,CAAC;MAChB;IACF,CAAC;IAED,MAAMA,YAAY,GAAGA,CAAA,KAAM;MACzBX,QAAQ,CAACY,oBAAoB,CAACP,SAAS,CAAC;MACxC,IAAIQ,GAAG,GAAG,CAAC;MACX,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGX,YAAY,EAAEW,CAAC,EAAE,EAAE;QACrCD,GAAG,IAAIR,SAAS,CAACS,CAAC,CAAC;MACrB;MACA,MAAMC,MAAM,GAAGF,GAAG,GAAGV,YAAY;MACjCI,SAAS,CAACS,KAAK,GAAGD,MAAM;MAExB,IAAIA,MAAM,GAAG,EAAE,IAAIN,KAAK,IAAI,KAAK,EAAE;QACjCQ,WAAW,CAAC,CAAC;MACf;MAEA,IAAIT,WAAW,EAAE;QACfU,qBAAqB,CAACP,YAAY,CAAC;MACrC;IACF,CAAC;IAEDlB,SAAS,CAAC,MAAM;MACd0B,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;QAAEZ,KAAK,EAAE;MAAK,CAAC,CAAC,CAC/Ca,IAAI,CAACC,MAAM,IAAI;QACd,MAAMC,MAAM,GAAG5B,YAAY,CAAC6B,uBAAuB,CAACF,MAAM,CAAC;QAC3DC,MAAM,CAACE,OAAO,CAAC1B,QAAQ,CAAC;MAC1B,CAAC,CAAC,CACD2B,KAAK,CAACC,GAAG,IAAI;QACZC,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAEF,GAAG,CAAC;MACjD,CAAC,CAAC;IACR,CAAC,CAAC;IAEF,MAAMX,WAAW,GAAGA,CAAA,KAAM;MACxB,MAAMc,QAAQ,GAAG,IAAIpC,QAAQ,CAAC;QAC5BqC,OAAO,EAAE;MACX,CAAC,CAAC;MACFD,QAAQ,CAACE,KAAK,CAAC,CAAC,CAACX,IAAI,CAAC,MAAM;QAC1BO,OAAO,CAACK,GAAG,CAAC,mBAAmB,CAAC;QAChCzB,KAAK,GAAG,IAAI;MACd,CAAC,CAAC,CAACkB,KAAK,CAACC,GAAG,IAAI;QACdC,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAEF,GAAG,CAAC;MACjD,CAAC,CAAC;IACJ,CAAC;IAED,MAAMO,aAAa,GAAGA,CAAA,KAAM;MAC1B3B,WAAW,GAAG,KAAK;MACnBC,KAAK,GAAG,KAAK;MACbF,SAAS,CAACS,KAAK,GAAG,CAAC;MACnBa,OAAO,CAACK,GAAG,CAAC,mBAAmB,CAAC;IAClC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}