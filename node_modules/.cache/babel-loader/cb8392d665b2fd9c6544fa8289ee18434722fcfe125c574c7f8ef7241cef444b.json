{"ast":null,"code":"import axios from 'axios';\n\n// 创建一个 axios 实例\nconst service = axios.create({\n  baseURL: '/proxy',\n  // 所有的请求地址前缀部分\n  timeout: 10000 // 请求超时时间毫秒\n  //withCredentials: true, // 异步请求携带cookie\n  // headers: {\n  //     // 设置后端需要的传参类型\n  //     'Content-Type': 'application/json',\n  //     'token': 'your token',\n  //     'X-Requested-With': 'XMLHttpRequest',\n  // },\n});\n\n// 添加请求拦截器\n// service.interceptors.request.use(\n//     function (config) {\n//         // 在发送请求之前做些什么\n//         const token = sessionStorage.getItem('Authorization')\n//         if(token){\n//             config.headers.authorization = token\n//         }\n//         return config\n//     },\n//     function (error) {\n//         // 对请求错误做些什么\n//         console.log(error)\n//         return Promise.reject(error)\n//     }\n// )\n\n// 添加响应拦截器\nservice.interceptors.response.use(function (response) {\n  //console.log(response)\n  // 2xx 范围内的状态码都会触发该函数。\n  // 对响应数据做点什么\n  // dataAxios 是 axios 返回数据中的 data\n  //const dataAxios = response.data\n  // 这个状态码是和后端约定的\n  //const code = dataAxios.reset\n  //return dataAxios\n  return response;\n}, function (error) {\n  // 超出 2xx 范围的状态码都会触发该函数。\n  // 对响应错误做点什么\n  console.log(error);\n  return Promise.reject(error);\n});\nexport default service;","map":{"version":3,"names":["axios","service","create","baseURL","timeout","interceptors","response","use","error","console","log","Promise","reject"],"sources":["D:/javafile/LightControl/src/plugins/axios.js"],"sourcesContent":["import axios from 'axios'\n\n// 创建一个 axios 实例\nconst service = axios.create({\n    baseURL: '/proxy', // 所有的请求地址前缀部分\n    timeout: 10000, // 请求超时时间毫秒\n    //withCredentials: true, // 异步请求携带cookie\n    // headers: {\n    //     // 设置后端需要的传参类型\n    //     'Content-Type': 'application/json',\n    //     'token': 'your token',\n    //     'X-Requested-With': 'XMLHttpRequest',\n    // },\n})\n\n// 添加请求拦截器\n// service.interceptors.request.use(\n//     function (config) {\n//         // 在发送请求之前做些什么\n//         const token = sessionStorage.getItem('Authorization')\n//         if(token){\n//             config.headers.authorization = token\n//         }\n//         return config\n//     },\n//     function (error) {\n//         // 对请求错误做些什么\n//         console.log(error)\n//         return Promise.reject(error)\n//     }\n// )\n\n// 添加响应拦截器\nservice.interceptors.response.use(\n    function (response) {\n        //console.log(response)\n        // 2xx 范围内的状态码都会触发该函数。\n        // 对响应数据做点什么\n        // dataAxios 是 axios 返回数据中的 data\n        //const dataAxios = response.data\n        // 这个状态码是和后端约定的\n        //const code = dataAxios.reset\n        //return dataAxios\n        return response\n    },\n    function (error) {\n        // 超出 2xx 范围的状态码都会触发该函数。\n        // 对响应错误做点什么\n        console.log(error)\n        return Promise.reject(error)\n    }\n)\n\nexport default service\n\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,OAAO,GAAGD,KAAK,CAACE,MAAM,CAAC;EACzBC,OAAO,EAAE,QAAQ;EAAE;EACnBC,OAAO,EAAE,KAAK,CAAE;EAChB;EACA;EACA;EACA;EACA;EACA;EACA;AACJ,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACAH,OAAO,CAACI,YAAY,CAACC,QAAQ,CAACC,GAAG,CAC7B,UAAUD,QAAQ,EAAE;EAChB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,OAAOA,QAAQ;AACnB,CAAC,EACD,UAAUE,KAAK,EAAE;EACb;EACA;EACAC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EAClB,OAAOG,OAAO,CAACC,MAAM,CAACJ,KAAK,CAAC;AAChC,CACJ,CAAC;AAED,eAAeP,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}