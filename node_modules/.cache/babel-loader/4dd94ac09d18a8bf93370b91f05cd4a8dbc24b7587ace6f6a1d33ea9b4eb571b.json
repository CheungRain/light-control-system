{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, normalizeClass as _normalizeClass } from \"vue\";\nconst _hoisted_1 = {\n  class: \"chat-room\"\n};\nconst _hoisted_2 = {\n  class: \"message-container\"\n};\nconst _hoisted_3 = {\n  class: \"content\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.messages, message => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: message.id,\n      class: _normalizeClass([\"message\", {\n        'received': message.received,\n        'sent': !message.received\n      }])\n    }, [_createElementVNode(\"p\", _hoisted_3, _toDisplayString(message.content), 1 /* TEXT */)], 2 /* CLASS */);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_Fragment","_renderList","$setup","messages","message","key","id","_normalizeClass","received","_hoisted_3","_toDisplayString","content"],"sources":["D:\\VUE\\demo\\src\\views\\ChatRoom.vue"],"sourcesContent":["<template>\r\n  <div class=\"chat-room\">\r\n    <div class=\"message-container\">\r\n      <div v-for=\"message in messages\" :key=\"message.id\" class=\"message\" :class=\"{'received': message.received, 'sent': !message.received}\">\r\n        <p class=\"content\">{{ message.content }}</p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style>\r\n.chat-room {\r\n  background-color: #f6f6f6;\r\n  padding: 20px;\r\n  max-width: 100%;\r\n  border: 5px solid red;\r\n}\r\n\r\n.message-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow-y: auto;\r\n  overflow-x: hidden;\r\n  max-height: 400px; /* 添加最大高度，以便控制滚动条出现 */\r\n}\r\n\r\n.message {\r\n  margin-bottom: 10px;\r\n  padding: 10px;\r\n  border-radius: 10px;\r\n  color: #fff;\r\n  word-wrap: break-word;\r\n}\r\n\r\n.received {\r\n  background-color: #0099ff;\r\n  align-self: flex-start;\r\n  width: 70%;\r\n  max-width: 300px;\r\n}\r\n\r\n.sent {\r\n  background-color: #4caf50;\r\n  align-self: flex-end;\r\n  margin-left: auto;\r\n  width: 70%;\r\n  max-width: 300px;\r\n}\r\n\r\n.content {\r\n  white-space: pre-wrap;\r\n}\r\n</style>\r\n\r\n<script setup>\r\nimport {ElMessage} from \"element-plus\"\r\nimport {onMounted, onUpdated, reactive, ref} from \"vue\"\r\nimport axios from \"@/plugins/axios\"\r\nconst options = reactive([])\r\nconst selectForm = ref('')\r\nconst inputData = ref('')\r\nconst account = sessionStorage.getItem(\"Account\")\r\nconst accountSet = new Set()\r\nlet message = reactive({\r\n  fromWho: \"\",\r\n  toWho: \"\",\r\n  text: \"\",\r\n  date: new Date()\r\n})\r\nconst sendMessage = () => {\r\n  message.fromWho = account\r\n  message.text = inputData.value\r\n  message.toWho = selectForm.value\r\n  message.date = new Date()\r\n  ws.send(JSON.stringify(message))\r\n  const msg = {sender:account,time:message.date,content: message.text,received: false}\r\n  messages.push(msg)\r\n  inputData.value = \"\"\r\n}\r\nconst messages = reactive([])\r\nconst ws = new WebSocket(\"ws://192.168.1.11:1113/webSocket/\"+account)\r\n//连接建立时\r\nws.onopen = function (evt){\r\n  console.log(\"connect\")\r\n  const url = \"/onlineUsers\"\r\n  const data = {}\r\n  const config = {\r\n    params: {\r\n      account: account\r\n    }\r\n  }\r\n  axios.post(url,data,config)\r\n      .then(response => {\r\n        const nameSet = response.data\r\n        if(nameSet){\r\n          for(let valueAccount of nameSet) {\r\n            const newOption = { label: valueAccount, value: valueAccount }\r\n            if(!accountSet.has(valueAccount)) {\r\n              options.push(newOption)\r\n            }\r\n            accountSet.add(valueAccount)\r\n          }\r\n        }\r\n      })\r\n}\r\n\r\n//接收到服务器消息时\r\nws.onmessage = function (evt){\r\n  message = JSON.parse(evt.data)\r\n  if(message.fromWho==\"system_connect_open\") {\r\n    if(message.text!=account) {\r\n      ElMessage.info(message.text + \"上线了\")\r\n      const newOption = {label: message.text, value: message.text}\r\n      if (!accountSet.has(message.text)) {\r\n        options.push(newOption)\r\n      }\r\n      accountSet.add(message.text)\r\n    }\r\n  }else if(message.fromWho==\"system_connect_close\") {\r\n    ElMessage.info(message.text+\"下线了\")\r\n    accountSet.delete(message.text)\r\n    for (const option of options) {\r\n      const index = options.indexOf(option);\r\n      if (option.label === message.text) {\r\n        options.splice(index,1);\r\n        selectForm.value = \"\"\r\n      }\r\n    }\r\n  }else{\r\n    const msg = {sender:message.fromWho,time:message.date,content: message.text,received: true}\r\n    messages.push(msg)\r\n  }\r\n}\r\n//连接断开时\r\nws.onclose = function (evt){\r\n  console.log(\"close\")\r\n}\r\n//发生错误时\r\nws.onerror = function (evt){\r\n  console.log(\"error\")\r\n}\r\n\r\n</script>\r\n"],"mappings":";;EACOA,KAAK,EAAC;AAAW;;EACfA,KAAK,EAAC;AAAmB;;EAEvBA,KAAK,EAAC;AAAS;;uBAHxBC,mBAAA,CAMM,OANNC,UAMM,GALJC,mBAAA,CAIM,OAJNC,UAIM,I,kBAHJH,mBAAA,CAEMI,SAAA,QAAAC,WAAA,CAFiBC,MAAA,CAAAC,QAAQ,EAAnBC,OAAO;yBAAnBR,mBAAA,CAEM;MAF4BS,GAAG,EAAED,OAAO,CAACE,EAAE;MAAEX,KAAK,EAAAY,eAAA,EAAC,SAAS;QAAA,YAAsBH,OAAO,CAACI,QAAQ;QAAA,SAAWJ,OAAO,CAACI;MAAQ;QACjIV,mBAAA,CAA4C,KAA5CW,UAA4C,EAAAC,gBAAA,CAAtBN,OAAO,CAACO,OAAO,iB"},"metadata":{},"sourceType":"module","externalDependencies":[]}