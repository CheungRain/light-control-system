{"ast":null,"code":"import \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.find-last.js\";\nimport \"core-js/modules/es.typed-array.find-last-index.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport Recorder from \"js-audio-recorder\";\nexport default {\n  name: \"audioRecorder\",\n  data() {\n    return {\n      recorder: new Recorder({\n        sampleBits: 16,\n        // 采样位数，支持 8 或 16，默认是16\n        sampleRate: 16000,\n        // 采样率，支持 11025、16000、22050、24000、44100、48000，根据浏览器默认值，我的chrome是48000\n        numChannels: 1 // 声道，支持 1 或 2， 默认是1\n        // compiling: false,(0.x版本中生效,1.x增加中)  // 是否边录边转换，默认是false\n      })\n    };\n  },\n\n  mounted() {},\n  methods: {\n    //开始录音\n    startRecordAudio() {\n      Recorder.getPermission().then(() => {\n        console.log(\"开始录音\");\n        this.recorder.start(); // 开始录音\n      }, error => {\n        this.$message({\n          message: \"请先允许该网页使用麦克风\",\n          type: \"info\"\n        });\n        console.log(`${error.name} : ${error.message}`);\n      });\n    },\n    //停止录音\n    stopRecordAudio() {\n      console.log(\"停止录音\");\n      this.recorder.stop();\n      const pcmblob = this.recorder.getPCMBlob();\n      const pcmstring = Uint8Array(pcmblob.arrayBuffer());\n      console.log(pcmstring);\n    },\n    //播放录音\n    playRecordAudio() {\n      console.log(\"播放录音\");\n      this.recorder.play();\n    },\n    //获取PCB录音数据\n    getPCBRecordAudioData() {\n      var pcmBlob = this.recorder.getPCMBlob();\n      console.log(pcmBlob);\n    },\n    //获取WAV录音数据\n    getWAVRecordAudioData() {\n      var wavBlob = this.recorder.getWAVBlob();\n      console.log(wavBlob);\n    },\n    //下载PCB录音文件\n    downloadPCBRecordAudioData() {\n      this.recorder.downloadPCM(\"badao\");\n    },\n    //下载WAV录音文件\n    downloadWAVRecordAudioData() {\n      this.recorder.downloadWAV(\"badao\");\n    },\n    //上传wav录音数据\n    uploadWAVData() {\n      var wavBlob = this.recorder.getWAVBlob();\n      // 创建一个formData对象\n      var formData = new FormData();\n      // 此处获取到blob对象后需要设置fileName满足当前项目上传需求，其它项目可直接传把blob作为file塞入formData\n      const newbolb = new Blob([wavBlob], {\n        type: 'audio/wav'\n      });\n      //获取当时时间戳作为文件名\n      const fileOfBlob = new File([newbolb], new Date().getTime() + '.wav');\n      formData.append('file', fileOfBlob);\n      uploadWavData(formData).then(response => {\n        console.log(response);\n      });\n    }\n  },\n  watch: {}\n};","map":{"version":3,"names":["Recorder","name","data","recorder","sampleBits","sampleRate","numChannels","mounted","methods","startRecordAudio","getPermission","then","console","log","start","error","$message","message","type","stopRecordAudio","stop","pcmblob","getPCMBlob","pcmstring","Uint8Array","arrayBuffer","playRecordAudio","play","getPCBRecordAudioData","pcmBlob","getWAVRecordAudioData","wavBlob","getWAVBlob","downloadPCBRecordAudioData","downloadPCM","downloadWAVRecordAudioData","downloadWAV","uploadWAVData","formData","FormData","newbolb","Blob","fileOfBlob","File","Date","getTime","append","uploadWavData","response","watch"],"sources":["D:\\javafile\\LightControl\\src\\views\\IndexPage.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <el-button type=\"button\" @click=\"startRecordAudio\">开始录音</el-button>\r\n    <h3>录音时长：{{ recorder.duration.toFixed(4) }}</h3>\r\n    <br />\r\n    <el-button type=\"button\" @click=\"stopRecordAudio\">停止录音</el-button>\r\n    <el-button type=\"button\" @click=\"playRecordAudio\">播放录音</el-button>\r\n    <el-button type=\"button\" @click=\"getPCBRecordAudioData\"\r\n    >获取PCB录音数据</el-button\r\n    >\r\n    <el-button type=\"button\" @click=\"downloadPCBRecordAudioData\"\r\n    >下载PCB录音文件</el-button\r\n    >\r\n    <el-button type=\"button\" @click=\"getWAVRecordAudioData\"\r\n    >获取WAV录音数据</el-button\r\n    >\r\n    <el-button type=\"button\" @click=\"downloadWAVRecordAudioData\"\r\n    >下载WAV录音文件</el-button\r\n    >\r\n    <el-button type=\"button\" @click=\"uploadWAVData\">上传WAV录音数据</el-button>\r\n    <br />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Recorder from \"js-audio-recorder\";\r\nexport default {\r\n  name: \"audioRecorder\",\r\n  data() {\r\n    return {\r\n      recorder: new Recorder({\r\n        sampleBits: 16, // 采样位数，支持 8 或 16，默认是16\r\n        sampleRate: 16000, // 采样率，支持 11025、16000、22050、24000、44100、48000，根据浏览器默认值，我的chrome是48000\r\n        numChannels: 1, // 声道，支持 1 或 2， 默认是1\r\n        // compiling: false,(0.x版本中生效,1.x增加中)  // 是否边录边转换，默认是false\r\n      }),\r\n    };\r\n  },\r\n  mounted() {},\r\n  methods: {\r\n    //开始录音\r\n    startRecordAudio() {\r\n      Recorder.getPermission().then(\r\n          () => {\r\n            console.log(\"开始录音\");\r\n            this.recorder.start(); // 开始录音\r\n          },\r\n          (error) => {\r\n            this.$message({\r\n              message: \"请先允许该网页使用麦克风\",\r\n              type: \"info\",\r\n            });\r\n            console.log(`${error.name} : ${error.message}`);\r\n          }\r\n      );\r\n    },\r\n    //停止录音\r\n    stopRecordAudio() {\r\n      console.log(\"停止录音\");\r\n      this.recorder.stop();\r\n      const pcmblob = this.recorder.getPCMBlob();\r\n      const pcmstring = Uint8Array(pcmblob.arrayBuffer());\r\n      console.log(pcmstring)\r\n    },\r\n    //播放录音\r\n    playRecordAudio() {\r\n      console.log(\"播放录音\");\r\n      this.recorder.play();\r\n    },\r\n    //获取PCB录音数据\r\n    getPCBRecordAudioData() {\r\n      var pcmBlob = this.recorder.getPCMBlob();\r\n      console.log(pcmBlob);\r\n    },\r\n    //获取WAV录音数据\r\n    getWAVRecordAudioData() {\r\n      var wavBlob = this.recorder.getWAVBlob();\r\n      console.log(wavBlob);\r\n    },\r\n    //下载PCB录音文件\r\n    downloadPCBRecordAudioData() {\r\n      this.recorder.downloadPCM(\"badao\");\r\n    },\r\n    //下载WAV录音文件\r\n    downloadWAVRecordAudioData() {\r\n      this.recorder.downloadWAV(\"badao\");\r\n    },\r\n    //上传wav录音数据\r\n    uploadWAVData() {\r\n      var wavBlob = this.recorder.getWAVBlob();\r\n      // 创建一个formData对象\r\n      var formData = new FormData()\r\n      // 此处获取到blob对象后需要设置fileName满足当前项目上传需求，其它项目可直接传把blob作为file塞入formData\r\n      const newbolb = new Blob([wavBlob], { type: 'audio/wav' })\r\n      //获取当时时间戳作为文件名\r\n      const fileOfBlob = new File([newbolb], new Date().getTime() + '.wav')\r\n      formData.append('file', fileOfBlob)\r\n      uploadWavData(formData).then((response) => {\r\n        console.log(response);\r\n      });\r\n    },\r\n  },\r\n  watch: {},\r\n};\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}