{"ast":null,"code":"import Recorder from \"js-audio-recorder\";\nexport default {\n  name: \"audioRecorder\",\n  data() {\n    return {\n      recorder: new Recorder({\n        sampleBits: 16,\n        // 采样位数，支持 8 或 16，默认是16\n        sampleRate: 16000,\n        // 采样率，支持 11025、16000、22050、24000、44100、48000，根据浏览器默认值，我的chrome是48000\n        numChannels: 1 // 声道，支持 1 或 2， 默认是1\n        // compiling: false,(0.x版本中生效,1.x增加中)  // 是否边录边转换，默认是false\n      }),\n\n      base64Data: null\n    };\n  },\n  methods: {\n    //开始录音\n    startRecordAudio() {\n      this.recorder.start();\n    },\n    //停止录音\n    stopRecordAudio() {\n      console.log(\"停止录音\");\n      this.recorder.stop();\n    },\n    //播放录音\n    playRecordAudio() {\n      console.log(\"播放录音\");\n      this.recorder.play();\n    },\n    //获取PCB录音数据\n    getPCBRecordAudioData() {\n      const pcmBlob = this.recorder.getPCMBlob();\n      console.log(pcmBlob);\n    },\n    //获取WAV录音数据\n    getWAVRecordAudioData() {\n      const wavBlob = this.recorder.getWAVBlob();\n      console.log(wavBlob);\n    },\n    //下载PCB录音文件\n    downloadPCBRecordAudioData() {\n      this.recorder.downloadPCM(\"badao\");\n    },\n    //下载WAV录音文件\n    downloadWAVRecordAudioData() {\n      this.recorder.downloadWAV(\"badao\");\n    },\n    //上传wav录音数据\n    uploadWAVData() {\n      const wavBlob = this.recorder.getWAVBlob();\n      // 创建一个formData对象\n      const formData = new FormData();\n      // 此处获取到blob对象后需要设置fileName满足当前项目上传需求，其它项目可直接传把blob作为file塞入formData\n      const newbolb = new Blob([wavBlob], {\n        type: \"audio/wav\"\n      });\n      //获取当时时间戳作为文件名\n      const fileOfBlob = new File([newbolb], new Date().getTime() + \".wav\");\n      formData.append(\"file\", fileOfBlob);\n    },\n    //获取录音文件Base64数据\n    getBase64Data() {\n      let pcmBlob = this.recorder.getPCMBlob();\n      pcmBlob.text().then(res => {\n        let base64 = require('js-base64');\n        let be = base64.encode(res);\n        console.log(be);\n      });\n    }\n  },\n  watch: {}\n};","map":{"version":3,"names":["Recorder","name","data","recorder","sampleBits","sampleRate","numChannels","base64Data","methods","startRecordAudio","start","stopRecordAudio","console","log","stop","playRecordAudio","play","getPCBRecordAudioData","pcmBlob","getPCMBlob","getWAVRecordAudioData","wavBlob","getWAVBlob","downloadPCBRecordAudioData","downloadPCM","downloadWAVRecordAudioData","downloadWAV","uploadWAVData","formData","FormData","newbolb","Blob","type","fileOfBlob","File","Date","getTime","append","getBase64Data","text","then","res","base64","require","be","encode","watch"],"sources":["D:\\javafile\\LightControl\\src\\views\\IndexPage.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <el-button type=\"button\" @click=\"startRecordAudio\">开始录音</el-button>\r\n    <h3>录音时长：{{ recorder.duration.toFixed(4) }}</h3>\r\n    <br />\r\n    <el-button type=\"button\" @click=\"stopRecordAudio\">停止录音</el-button>\r\n    <el-button type=\"button\" @click=\"playRecordAudio\">播放录音</el-button>\r\n    <el-button type=\"button\" @click=\"getPCBRecordAudioData\"\r\n    >获取PCB录音数据</el-button\r\n    >\r\n    <el-button type=\"button\" @click=\"downloadPCBRecordAudioData\"\r\n    >下载PCB录音文件</el-button\r\n    >\r\n    <el-button type=\"button\" @click=\"getWAVRecordAudioData\"\r\n    >获取WAV录音数据</el-button\r\n    >\r\n    <el-button type=\"button\" @click=\"downloadWAVRecordAudioData\"\r\n    >下载WAV录音文件</el-button\r\n    >\r\n    <el-button type=\"button\" @click=\"uploadWAVData\">上传WAV录音数据</el-button>\r\n    <br />\r\n    <el-button type=\"button\" @click=\"getBase64Data\">获取录音文件Base64数据</el-button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Recorder from \"js-audio-recorder\";\r\nexport default {\r\n  name: \"audioRecorder\",\r\n  data() {\r\n    return {\r\n      recorder: new Recorder({\r\n        sampleBits: 16, // 采样位数，支持 8 或 16，默认是16\r\n        sampleRate: 16000, // 采样率，支持 11025、16000、22050、24000、44100、48000，根据浏览器默认值，我的chrome是48000\r\n        numChannels: 1, // 声道，支持 1 或 2， 默认是1\r\n        // compiling: false,(0.x版本中生效,1.x增加中)  // 是否边录边转换，默认是false\r\n      }),\r\n      base64Data: null,\r\n    };\r\n  },\r\n  methods: {\r\n    //开始录音\r\n    startRecordAudio() {\r\n      this.recorder.start();\r\n    },\r\n    //停止录音\r\n    stopRecordAudio() {\r\n      console.log(\"停止录音\");\r\n      this.recorder.stop();\r\n    },\r\n    //播放录音\r\n    playRecordAudio() {\r\n      console.log(\"播放录音\");\r\n      this.recorder.play();\r\n    },\r\n    //获取PCB录音数据\r\n    getPCBRecordAudioData() {\r\n      const pcmBlob = this.recorder.getPCMBlob();\r\n      console.log(pcmBlob);\r\n    },\r\n    //获取WAV录音数据\r\n    getWAVRecordAudioData() {\r\n      const wavBlob = this.recorder.getWAVBlob();\r\n      console.log(wavBlob);\r\n    },\r\n    //下载PCB录音文件\r\n    downloadPCBRecordAudioData() {\r\n      this.recorder.downloadPCM(\"badao\");\r\n    },\r\n    //下载WAV录音文件\r\n    downloadWAVRecordAudioData() {\r\n      this.recorder.downloadWAV(\"badao\");\r\n    },\r\n    //上传wav录音数据\r\n    uploadWAVData() {\r\n      const wavBlob = this.recorder.getWAVBlob();\r\n      // 创建一个formData对象\r\n      const formData = new FormData();\r\n      // 此处获取到blob对象后需要设置fileName满足当前项目上传需求，其它项目可直接传把blob作为file塞入formData\r\n      const newbolb = new Blob([wavBlob], { type: \"audio/wav\" });\r\n      //获取当时时间戳作为文件名\r\n      const fileOfBlob = new File([newbolb], new Date().getTime() + \".wav\");\r\n      formData.append(\"file\", fileOfBlob);\r\n    },\r\n    //获取录音文件Base64数据\r\n    getBase64Data() {\r\n      let pcmBlob = this.recorder.getPCMBlob()\r\n      pcmBlob.text().then(res=>{\r\n        let base64 = require('js-base64')\r\n        let be = base64.encode(res)\r\n        console.log(be)\r\n      })\r\n    },\r\n  },\r\n  watch: {},\r\n};\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n</style>"],"mappings":"AA0BA,OAAOA,QAAO,MAAO,mBAAmB;AACxC,eAAe;EACbC,IAAI,EAAE,eAAe;EACrBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,IAAIH,QAAQ,CAAC;QACrBI,UAAU,EAAE,EAAE;QAAE;QAChBC,UAAU,EAAE,KAAK;QAAE;QACnBC,WAAW,EAAE,CAAC,CAAE;QAChB;MACF,CAAC,CAAC;;MACFC,UAAU,EAAE;IACd,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP;IACAC,gBAAgBA,CAAA,EAAG;MACjB,IAAI,CAACN,QAAQ,CAACO,KAAK,CAAC,CAAC;IACvB,CAAC;IACD;IACAC,eAAeA,CAAA,EAAG;MAChBC,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;MACnB,IAAI,CAACV,QAAQ,CAACW,IAAI,CAAC,CAAC;IACtB,CAAC;IACD;IACAC,eAAeA,CAAA,EAAG;MAChBH,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;MACnB,IAAI,CAACV,QAAQ,CAACa,IAAI,CAAC,CAAC;IACtB,CAAC;IACD;IACAC,qBAAqBA,CAAA,EAAG;MACtB,MAAMC,OAAM,GAAI,IAAI,CAACf,QAAQ,CAACgB,UAAU,CAAC,CAAC;MAC1CP,OAAO,CAACC,GAAG,CAACK,OAAO,CAAC;IACtB,CAAC;IACD;IACAE,qBAAqBA,CAAA,EAAG;MACtB,MAAMC,OAAM,GAAI,IAAI,CAAClB,QAAQ,CAACmB,UAAU,CAAC,CAAC;MAC1CV,OAAO,CAACC,GAAG,CAACQ,OAAO,CAAC;IACtB,CAAC;IACD;IACAE,0BAA0BA,CAAA,EAAG;MAC3B,IAAI,CAACpB,QAAQ,CAACqB,WAAW,CAAC,OAAO,CAAC;IACpC,CAAC;IACD;IACAC,0BAA0BA,CAAA,EAAG;MAC3B,IAAI,CAACtB,QAAQ,CAACuB,WAAW,CAAC,OAAO,CAAC;IACpC,CAAC;IACD;IACAC,aAAaA,CAAA,EAAG;MACd,MAAMN,OAAM,GAAI,IAAI,CAAClB,QAAQ,CAACmB,UAAU,CAAC,CAAC;MAC1C;MACA,MAAMM,QAAO,GAAI,IAAIC,QAAQ,CAAC,CAAC;MAC/B;MACA,MAAMC,OAAM,GAAI,IAAIC,IAAI,CAAC,CAACV,OAAO,CAAC,EAAE;QAAEW,IAAI,EAAE;MAAY,CAAC,CAAC;MAC1D;MACA,MAAMC,UAAS,GAAI,IAAIC,IAAI,CAAC,CAACJ,OAAO,CAAC,EAAE,IAAIK,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,IAAI,MAAM,CAAC;MACrER,QAAQ,CAACS,MAAM,CAAC,MAAM,EAAEJ,UAAU,CAAC;IACrC,CAAC;IACD;IACAK,aAAaA,CAAA,EAAG;MACd,IAAIpB,OAAM,GAAI,IAAI,CAACf,QAAQ,CAACgB,UAAU,CAAC;MACvCD,OAAO,CAACqB,IAAI,CAAC,CAAC,CAACC,IAAI,CAACC,GAAG,IAAE;QACvB,IAAIC,MAAK,GAAIC,OAAO,CAAC,WAAW;QAChC,IAAIC,EAAC,GAAIF,MAAM,CAACG,MAAM,CAACJ,GAAG;QAC1B7B,OAAO,CAACC,GAAG,CAAC+B,EAAE;MAChB,CAAC;IACH;EACF,CAAC;EACDE,KAAK,EAAE,CAAC;AACV,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}