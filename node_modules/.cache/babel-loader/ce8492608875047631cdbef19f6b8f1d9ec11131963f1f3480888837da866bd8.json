{"ast":null,"code":"import axios, { request } from 'axios';\n\n// 创建一个 axios 实例\nconst service = axios.create({\n  baseURL: 'http://localhost:1113',\n  // 所有的请求地址前缀部分\n  timeout: 60000,\n  // 请求超时时间毫秒\n  withCredentials: true // 异步请求携带cookie\n  // headers: {\n  //     // 设置后端需要的传参类型\n  //     'Content-Type': 'application/json',\n  //     'token': 'your token',\n  //     'X-Requested-With': 'XMLHttpRequest',\n  // },\n});\n\n// 添加请求拦截器\nservice.interceptors.request.use(function (config) {\n  // 在发送请求之前做些什么\n  const token = localStorage.getItem('Authorization');\n  if (token) {\n    config.headers.authorization = token;\n  }\n  return config;\n}, function (error) {\n  // 对请求错误做些什么\n  console.log(error);\n  return Promise.reject(error);\n});\n\n// 添加响应拦截器\nservice.interceptors.response.use(function (response) {\n  //console.log(response)\n  // 2xx 范围内的状态码都会触发该函数。\n  // 对响应数据做点什么\n  // dataAxios 是 axios 返回数据中的 data\n  //const dataAxios = response.data\n  // 这个状态码是和后端约定的\n  //const code = dataAxios.reset\n  //return dataAxios\n  return response.data;\n}, function (error) {\n  // 超出 2xx 范围的状态码都会触发该函数。\n  // 对响应错误做点什么\n  console.log(error);\n  return Promise.reject(error);\n});\nexport default service;","map":{"version":3,"names":["axios","request","service","create","baseURL","timeout","withCredentials","interceptors","use","config","token","localStorage","getItem","headers","authorization","error","console","log","Promise","reject","response","data"],"sources":["D:/VUE/demo/src/plugins/axios.js"],"sourcesContent":["import axios, {request} from 'axios'\r\n\r\n// 创建一个 axios 实例\r\nconst service = axios.create({\r\n    baseURL: 'http://localhost:1113', // 所有的请求地址前缀部分\r\n    timeout: 60000, // 请求超时时间毫秒\r\n    withCredentials: true, // 异步请求携带cookie\r\n    // headers: {\r\n    //     // 设置后端需要的传参类型\r\n    //     'Content-Type': 'application/json',\r\n    //     'token': 'your token',\r\n    //     'X-Requested-With': 'XMLHttpRequest',\r\n    // },\r\n})\r\n\r\n// 添加请求拦截器\r\nservice.interceptors.request.use(\r\n    function (config) {\r\n        // 在发送请求之前做些什么\r\n        const token = localStorage.getItem('Authorization')\r\n        if(token){\r\n            config.headers.authorization = token\r\n        }\r\n        return config\r\n    },\r\n    function (error) {\r\n        // 对请求错误做些什么\r\n        console.log(error)\r\n        return Promise.reject(error)\r\n    }\r\n)\r\n\r\n// 添加响应拦截器\r\nservice.interceptors.response.use(\r\n    function (response) {\r\n        //console.log(response)\r\n        // 2xx 范围内的状态码都会触发该函数。\r\n        // 对响应数据做点什么\r\n        // dataAxios 是 axios 返回数据中的 data\r\n        //const dataAxios = response.data\r\n        // 这个状态码是和后端约定的\r\n        //const code = dataAxios.reset\r\n        //return dataAxios\r\n        return response.data\r\n    },\r\n    function (error) {\r\n        // 超出 2xx 范围的状态码都会触发该函数。\r\n        // 对响应错误做点什么\r\n        console.log(error)\r\n        return Promise.reject(error)\r\n    }\r\n)\r\n\r\nexport default service\r\n\r\n"],"mappings":"AAAA,OAAOA,KAAK,IAAGC,OAAO,QAAO,OAAO;;AAEpC;AACA,MAAMC,OAAO,GAAGF,KAAK,CAACG,MAAM,CAAC;EACzBC,OAAO,EAAE,uBAAuB;EAAE;EAClCC,OAAO,EAAE,KAAK;EAAE;EAChBC,eAAe,EAAE,IAAI,CAAE;EACvB;EACA;EACA;EACA;EACA;EACA;AACJ,CAAC,CAAC;;AAEF;AACAJ,OAAO,CAACK,YAAY,CAACN,OAAO,CAACO,GAAG,CAC5B,UAAUC,MAAM,EAAE;EACd;EACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC;EACnD,IAAGF,KAAK,EAAC;IACLD,MAAM,CAACI,OAAO,CAACC,aAAa,GAAGJ,KAAK;EACxC;EACA,OAAOD,MAAM;AACjB,CAAC,EACD,UAAUM,KAAK,EAAE;EACb;EACAC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EAClB,OAAOG,OAAO,CAACC,MAAM,CAACJ,KAAK,CAAC;AAChC,CACJ,CAAC;;AAED;AACAb,OAAO,CAACK,YAAY,CAACa,QAAQ,CAACZ,GAAG,CAC7B,UAAUY,QAAQ,EAAE;EAChB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,OAAOA,QAAQ,CAACC,IAAI;AACxB,CAAC,EACD,UAAUN,KAAK,EAAE;EACb;EACA;EACAC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EAClB,OAAOG,OAAO,CAACC,MAAM,CAACJ,KAAK,CAAC;AAChC,CACJ,CAAC;AAED,eAAeb,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}