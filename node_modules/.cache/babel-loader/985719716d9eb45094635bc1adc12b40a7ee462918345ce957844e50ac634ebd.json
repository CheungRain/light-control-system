{"ast":null,"code":"import axios from 'axios';\nimport router from \"@/router/index\";\nconst request = axios.create({\n  baseURL: `http://localhost:1113`,\n  timeout: 30000\n});\n// http request拦截器 添加一个请求拦截器\naxios.interceptors.request.use(function (config) {\n  // Do something before request is sent\n  //window.localStorage.getItem(\"accessToken\") 获取token的value\n  let token = window.localStorage.getItem(\"accessToken\");\n  if (token) {\n    //将token放到请求头发送给服务器,将tokenkey放在请求头中\n    config.headers.accessToken = token;\n    //也可以这种写法\n    // config.headers['accessToken'] = Token;\n    return config;\n  }\n}, function (error) {\n  // Do something with request error\n  return Promise.reject(error);\n});\n\n// // response 拦截器\n// // 可以在接口响应后统一处理结果\n// request.interceptors.response.use(\n//     response => {\n//         let res = response.data;\n//         // 如果是返回的文件\n//         if (response.config.responseType === 'blob') {\n//             return res\n//         }\n//         // 兼容服务端返回的字符串数据\n//         if (typeof res === 'string') {\n//             res = res ? JSON.parse(res) : res\n//         }\n//         // 当权限验证不通过的时候给出提示\n//         if (res.code === 401) {\n//             ElementUI.Message({\n//                 message: res.msg,\n//                 type: 'error'\n//             });\n//             router.replace(\"/login\")\n//         }\n//         return res;\n//     },\n//     error => {\n//         console.log('err' + error) // for debug\n//         return Promise.reject(error)\n//     }\n// )\n\nexport default request;","map":{"version":3,"names":["axios","router","request","create","baseURL","timeout","interceptors","use","config","token","window","localStorage","getItem","headers","accessToken","error","Promise","reject"],"sources":["D:/VUE/demo/src/plugins/axios.js"],"sourcesContent":["import axios from 'axios'\r\nimport router from \"@/router/index\";\r\n\r\nconst request = axios.create({\r\n    baseURL: `http://localhost:1113`,\r\n    timeout: 30000,\r\n})\r\n// http request拦截器 添加一个请求拦截器\r\naxios.interceptors.request.use(function (config) {\r\n    // Do something before request is sent\r\n    //window.localStorage.getItem(\"accessToken\") 获取token的value\r\n    let token = window.localStorage.getItem(\"accessToken\")\r\n    if (token) {\r\n        //将token放到请求头发送给服务器,将tokenkey放在请求头中\r\n        config.headers.accessToken = token;\r\n        //也可以这种写法\r\n        // config.headers['accessToken'] = Token;\r\n        return config;\r\n    }\r\n}, function (error) {\r\n    // Do something with request error\r\n    return Promise.reject(error);\r\n});\r\n\r\n\r\n// // response 拦截器\r\n// // 可以在接口响应后统一处理结果\r\n// request.interceptors.response.use(\r\n//     response => {\r\n//         let res = response.data;\r\n//         // 如果是返回的文件\r\n//         if (response.config.responseType === 'blob') {\r\n//             return res\r\n//         }\r\n//         // 兼容服务端返回的字符串数据\r\n//         if (typeof res === 'string') {\r\n//             res = res ? JSON.parse(res) : res\r\n//         }\r\n//         // 当权限验证不通过的时候给出提示\r\n//         if (res.code === 401) {\r\n//             ElementUI.Message({\r\n//                 message: res.msg,\r\n//                 type: 'error'\r\n//             });\r\n//             router.replace(\"/login\")\r\n//         }\r\n//         return res;\r\n//     },\r\n//     error => {\r\n//         console.log('err' + error) // for debug\r\n//         return Promise.reject(error)\r\n//     }\r\n// )\r\n\r\n\r\nexport default request\r\n\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,gBAAgB;AAEnC,MAAMC,OAAO,GAAGF,KAAK,CAACG,MAAM,CAAC;EACzBC,OAAO,EAAG,uBAAsB;EAChCC,OAAO,EAAE;AACb,CAAC,CAAC;AACF;AACAL,KAAK,CAACM,YAAY,CAACJ,OAAO,CAACK,GAAG,CAAC,UAAUC,MAAM,EAAE;EAC7C;EACA;EACA,IAAIC,KAAK,GAAGC,MAAM,CAACC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;EACtD,IAAIH,KAAK,EAAE;IACP;IACAD,MAAM,CAACK,OAAO,CAACC,WAAW,GAAGL,KAAK;IAClC;IACA;IACA,OAAOD,MAAM;EACjB;AACJ,CAAC,EAAE,UAAUO,KAAK,EAAE;EAChB;EACA,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CAAC,CAAC;;AAGF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,eAAeb,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}