{"ast":null,"code":"import { createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_button = _resolveComponent(\"el-button\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_el_button, {\n    type: \"button\",\n    onClick: $options.startRecordAudio\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"开始录音\")]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onClick\"]), _createElementVNode(\"h3\", null, \"录音时长：\" + _toDisplayString($data.recorder.duration.toFixed(4)), 1 /* TEXT */), _hoisted_1, _createVNode(_component_el_button, {\n    type: \"button\",\n    onClick: $options.stopRecordAudio\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"停止录音\")]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onClick\"]), _createVNode(_component_el_button, {\n    type: \"button\",\n    onClick: $options.playRecordAudio\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"播放录音\")]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onClick\"]), _createVNode(_component_el_button, {\n    type: \"button\",\n    onClick: $options.getPCBRecordAudioData\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"获取PCB录音数据\")]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onClick\"]), _createVNode(_component_el_button, {\n    type: \"button\",\n    onClick: $options.downloadPCBRecordAudioData\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"下载PCB录音文件\")]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onClick\"]), _createVNode(_component_el_button, {\n    type: \"button\",\n    onClick: $options.getWAVRecordAudioData\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"获取WAV录音数据\")]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onClick\"]), _createVNode(_component_el_button, {\n    type: \"button\",\n    onClick: $options.downloadWAVRecordAudioData\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"下载WAV录音文件\")]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onClick\"]), _createVNode(_component_el_button, {\n    type: \"button\",\n    onClick: $options.uploadWAVData\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"上传WAV录音数据\")]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onClick\"]), _hoisted_2, _createVNode(_component_el_button, {\n    type: \"button\",\n    onClick: $options.getBase64Data\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"获取录音文件Base64数据\")]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onClick\"])]);\n}","map":{"version":3,"names":["_createElementVNode","_createElementBlock","_createVNode","_component_el_button","type","onClick","$options","startRecordAudio","_toDisplayString","$data","recorder","duration","toFixed","_hoisted_1","stopRecordAudio","playRecordAudio","getPCBRecordAudioData","downloadPCBRecordAudioData","getWAVRecordAudioData","downloadWAVRecordAudioData","uploadWAVData","_hoisted_2","getBase64Data"],"sources":["D:\\javafile\\LightControl\\src\\views\\IndexPage.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <el-button type=\"button\" @click=\"startRecordAudio\">开始录音</el-button>\r\n    <h3>录音时长：{{ recorder.duration.toFixed(4) }}</h3>\r\n    <br />\r\n    <el-button type=\"button\" @click=\"stopRecordAudio\">停止录音</el-button>\r\n    <el-button type=\"button\" @click=\"playRecordAudio\">播放录音</el-button>\r\n    <el-button type=\"button\" @click=\"getPCBRecordAudioData\"\r\n    >获取PCB录音数据</el-button\r\n    >\r\n    <el-button type=\"button\" @click=\"downloadPCBRecordAudioData\"\r\n    >下载PCB录音文件</el-button\r\n    >\r\n    <el-button type=\"button\" @click=\"getWAVRecordAudioData\"\r\n    >获取WAV录音数据</el-button\r\n    >\r\n    <el-button type=\"button\" @click=\"downloadWAVRecordAudioData\"\r\n    >下载WAV录音文件</el-button\r\n    >\r\n    <el-button type=\"button\" @click=\"uploadWAVData\">上传WAV录音数据</el-button>\r\n    <br />\r\n    <el-button type=\"button\" @click=\"getBase64Data\">获取录音文件Base64数据</el-button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Recorder from \"js-audio-recorder\";\r\nexport default {\r\n  name: \"audioRecorder\",\r\n  data() {\r\n    return {\r\n      recorder: new Recorder({\r\n        sampleBits: 16, // 采样位数，支持 8 或 16，默认是16\r\n        sampleRate: 16000, // 采样率，支持 11025、16000、22050、24000、44100、48000，根据浏览器默认值，我的chrome是48000\r\n        numChannels: 1, // 声道，支持 1 或 2， 默认是1\r\n        // compiling: false,(0.x版本中生效,1.x增加中)  // 是否边录边转换，默认是false\r\n      }),\r\n      base64Data: null,\r\n    };\r\n  },\r\n  methods: {\r\n    //开始录音\r\n    startRecordAudio() {\r\n      this.recorder.start();\r\n    },\r\n    //停止录音\r\n    stopRecordAudio() {\r\n      console.log(\"停止录音\");\r\n      this.recorder.stop();\r\n    },\r\n    //播放录音\r\n    playRecordAudio() {\r\n      console.log(\"播放录音\");\r\n      this.recorder.play();\r\n    },\r\n    //获取PCB录音数据\r\n    getPCBRecordAudioData() {\r\n      const pcmBlob = this.recorder.getPCMBlob();\r\n      console.log(pcmBlob);\r\n    },\r\n    //获取WAV录音数据\r\n    getWAVRecordAudioData() {\r\n      const wavBlob = this.recorder.getWAVBlob();\r\n      console.log(wavBlob);\r\n    },\r\n    //下载PCB录音文件\r\n    downloadPCBRecordAudioData() {\r\n      this.recorder.downloadPCM(\"badao\");\r\n    },\r\n    //下载WAV录音文件\r\n    downloadWAVRecordAudioData() {\r\n      this.recorder.downloadWAV(\"badao\");\r\n    },\r\n    //上传wav录音数据\r\n    uploadWAVData() {\r\n      const wavBlob = this.recorder.getWAVBlob();\r\n      // 创建一个formData对象\r\n      const formData = new FormData();\r\n      // 此处获取到blob对象后需要设置fileName满足当前项目上传需求，其它项目可直接传把blob作为file塞入formData\r\n      const newbolb = new Blob([wavBlob], { type: \"audio/wav\" });\r\n      //获取当时时间戳作为文件名\r\n      const fileOfBlob = new File([newbolb], new Date().getTime() + \".wav\");\r\n      formData.append(\"file\", fileOfBlob);\r\n    },\r\n    //获取录音文件Base64数据\r\n    getBase64Data() {\r\n      const wavBlob = this.recorder.getPCMBlob();\r\n      const base64 = require('js-base64')\r\n      console.log(base64.encode(wavBlob))\r\n    },\r\n  },\r\n  watch: {},\r\n};\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n</style>"],"mappings":";gCAIIA,mBAAA,CAAM;gCAgBNA,mBAAA,CAAM;;;;uBAnBRC,mBAAA,CAqBM,cApBJC,YAAA,CAAmEC,oBAAA;IAAxDC,IAAI,EAAC,QAAQ;IAAEC,OAAK,EAAEC,QAAA,CAAAC;;sBAAkB,MAAI,C,iBAAJ,MAAI,E;;kCACvDP,mBAAA,CAAgD,YAA5C,OAAK,GAAAQ,gBAAA,CAAGC,KAAA,CAAAC,QAAQ,CAACC,QAAQ,CAACC,OAAO,qBACrCC,UAAM,EACNX,YAAA,CAAkEC,oBAAA;IAAvDC,IAAI,EAAC,QAAQ;IAAEC,OAAK,EAAEC,QAAA,CAAAQ;;sBAAiB,MAAI,C,iBAAJ,MAAI,E;;kCACtDZ,YAAA,CAAkEC,oBAAA;IAAvDC,IAAI,EAAC,QAAQ;IAAEC,OAAK,EAAEC,QAAA,CAAAS;;sBAAiB,MAAI,C,iBAAJ,MAAI,E;;kCACtDb,YAAA,CAECC,oBAAA;IAFUC,IAAI,EAAC,QAAQ;IAAEC,OAAK,EAAEC,QAAA,CAAAU;;sBAChC,MAAS,C,iBAAT,WAAS,E;;kCAEVd,YAAA,CAECC,oBAAA;IAFUC,IAAI,EAAC,QAAQ;IAAEC,OAAK,EAAEC,QAAA,CAAAW;;sBAChC,MAAS,C,iBAAT,WAAS,E;;kCAEVf,YAAA,CAECC,oBAAA;IAFUC,IAAI,EAAC,QAAQ;IAAEC,OAAK,EAAEC,QAAA,CAAAY;;sBAChC,MAAS,C,iBAAT,WAAS,E;;kCAEVhB,YAAA,CAECC,oBAAA;IAFUC,IAAI,EAAC,QAAQ;IAAEC,OAAK,EAAEC,QAAA,CAAAa;;sBAChC,MAAS,C,iBAAT,WAAS,E;;kCAEVjB,YAAA,CAAqEC,oBAAA;IAA1DC,IAAI,EAAC,QAAQ;IAAEC,OAAK,EAAEC,QAAA,CAAAc;;sBAAe,MAAS,C,iBAAT,WAAS,E;;kCACzDC,UAAM,EACNnB,YAAA,CAA0EC,oBAAA;IAA/DC,IAAI,EAAC,QAAQ;IAAEC,OAAK,EAAEC,QAAA,CAAAgB;;sBAAe,MAAc,C,iBAAd,gBAAc,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}