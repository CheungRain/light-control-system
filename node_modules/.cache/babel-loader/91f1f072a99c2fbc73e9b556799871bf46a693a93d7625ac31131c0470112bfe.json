{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ElMessage } from \"element-plus\";\nimport { onMounted, onUpdated, reactive, ref } from \"vue\";\nimport axios from \"@/plugins/axios\";\nexport default {\n  __name: 'ChatRoom',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const options = reactive([]);\n    const selectForm = ref('');\n    const inputData = ref('');\n    const account = sessionStorage.getItem(\"Account\");\n    const accountSet = new Set();\n    let message = reactive({\n      fromWho: \"\",\n      toWho: \"\",\n      text: \"\",\n      date: new Date()\n    });\n    const scrollMsg = ref('');\n    const scrollToBottom = () => {\n      // 聊天定位到底部\n      scrollMsg.value.scrollTop = scrollMsg.value.scrollHeight;\n      console.log('聊天定位到底部！');\n    };\n    onMounted(scrollToBottom);\n    onUpdated(scrollToBottom);\n    const sendMessage = () => {\n      message.fromWho = account;\n      message.text = inputData.value;\n      message.toWho = selectForm.value;\n      message.date = new Date();\n      if (message.toWho && message.text) {\n        ws.send(JSON.stringify(message));\n        const msg = {\n          sender: \"发给\" + message.toWho,\n          time: new Date(),\n          content: message.text,\n          received: false\n        };\n        messages.push(msg);\n        inputData.value = \"\";\n      }\n    };\n    const messages = reactive([]);\n    const ws = new WebSocket(\"ws://192.168.1.11:1113/webSocket/\" + account);\n    //连接建立时\n    ws.onopen = function (evt) {\n      console.log(\"connect\");\n      const url = \"/onlineUsers\";\n      const data = {};\n      const config = {\n        params: {\n          account: account\n        }\n      };\n      axios.post(url, data, config).then(response => {\n        const nameSet = response.data;\n        if (nameSet) {\n          for (let valueAccount of nameSet) {\n            const newOption = {\n              label: valueAccount,\n              value: valueAccount\n            };\n            if (!accountSet.has(valueAccount)) {\n              options.push(newOption);\n              accountSet.add(valueAccount);\n            }\n          }\n        }\n      });\n    };\n\n    //接收到服务器消息时\n    ws.onmessage = function (evt) {\n      message = JSON.parse(evt.data);\n      if (message.fromWho == \"system_connect_open\") {\n        if (message.text != account) {\n          ElMessage.info(message.text + \"上线了\");\n          const newOption = {\n            label: message.text,\n            value: message.text\n          };\n          if (!accountSet.has(message.text)) {\n            options.push(newOption);\n          }\n          accountSet.add(message.text);\n        }\n      } else if (message.fromWho == \"system_connect_close\") {\n        ElMessage.info(message.text + \"下线了\");\n        accountSet.delete(message.text);\n        for (const option of options) {\n          const index = options.indexOf(option);\n          if (option.label === message.text) {\n            options.splice(index, 1);\n            selectForm.value = \"\";\n          }\n        }\n      } else {\n        const msg = {\n          sender: \"来自\" + message.fromWho,\n          time: new Date(),\n          content: message.text,\n          received: true\n        };\n        messages.push(msg);\n      }\n    };\n    //连接断开时\n    ws.onclose = function (evt) {\n      alert(\"你已离线,请重新登录\");\n      console.log(\"close\");\n    };\n    //发生错误时\n    ws.onerror = function (evt) {\n      console.log(\"error\");\n    };\n    const __returned__ = {\n      options,\n      selectForm,\n      inputData,\n      account,\n      accountSet,\n      get message() {\n        return message;\n      },\n      set message(v) {\n        message = v;\n      },\n      scrollMsg,\n      scrollToBottom,\n      sendMessage,\n      messages,\n      ws,\n      get ElMessage() {\n        return ElMessage;\n      },\n      onMounted,\n      onUpdated,\n      reactive,\n      ref,\n      get axios() {\n        return axios;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ElMessage","onMounted","onUpdated","reactive","ref","axios","options","selectForm","inputData","account","sessionStorage","getItem","accountSet","Set","message","fromWho","toWho","text","date","Date","scrollMsg","scrollToBottom","value","scrollTop","scrollHeight","console","log","sendMessage","ws","send","JSON","stringify","msg","sender","time","content","received","messages","push","WebSocket","onopen","evt","url","data","config","params","post","then","response","nameSet","valueAccount","newOption","label","has","add","onmessage","parse","info","delete","option","index","indexOf","splice","onclose","alert","onerror"],"sources":["D:/download/chatroom-master/chatroom-front/src/views/ChatRoom.vue"],"sourcesContent":["<template>\n  <div class=\"all-con\">\n    <div class=\"user-account\">当前用户: {{ account }}</div>\n    <div class=\"msg-con\">\n      <div class=\"messages\" ref=\"scrollMsg\">\n        <div v-for=\"msg in messages\" :key=\"msg.id\" class=\"msg\" :class=\"[msg.received ? 'received' : 'sent']\">\n          <p class=\"sender\">{{ msg.sender }}--{{ msg.time }}</p>\n          <p class=\"content\">{{ msg.content }}</p>\n        </div>\n      </div>\n    </div>\n    <div class=\"input-container\">\n      <el-input class=\"input\" v-model=\"inputData\" placeholder=\"请输入要发送的消息\" />\n      <el-button class=\"send-button\" @click=\"sendMessage\">发送</el-button>\n      <el-select class=\"select-form\" v-model=\"selectForm\" placeholder=\"选择发送人\">\n        <el-option v-for=\"option in options\" :key=\"option.value\" :label=\"option.label\" :value=\"option.value\" />\n      </el-select>\n    </div>\n  </div>\n</template>\n\n<style>\n.all-con{\n}\n.user-account {\n  font-size: 24px;\n  font-weight: bold;\n  background-color: #4b7ba2;\n  color: white;\n}\n\n.messages {\n  overflow-y: auto;\n  max-height:350px;\n  padding: 10px;\n}\n.msg-con{\n  height: 350px;\n}\n.msg {\n  background-color: #0099ff;\n  border-radius: 15px;\n  margin-bottom: 10px;\n}\n.received {\n  background-color: #0099ff;\n  align-self: flex-start;\n  margin-right: auto;\n  width: 50%;\n  max-width: 100%;\n  word-wrap: break-word;\n}\n\n.sent {\n  background-color: #4caf68;\n  align-self: flex-start;\n  margin-left: auto;\n  width: 50%;\n  max-width: 100%;\n  word-wrap: break-word;\n}\n.sender {\n  font-size: 12px;\n  font-weight: bold;\n  color: #a24b62;\n  margin: 0 0 5px;\n}\n\n.content {\n  font-size: 14px;\n  line-height: 1.5;\n  margin: 5px 0;\n}\n\n.input-container {\n  /*display: flex;*/\n  align-items: center;\n  gap: 10px;\n  margin-top: 20px;\n}\n\n.input {\n  flex: 1;\n}\n.input:hover{\n  background-color: rgba(102, 234, 223, 0.77);\n}\n.send-button {\n  width: 80px;\n  background-color: #ff4081;\n\n  border: none;\n  border-radius: 5px;\n}\n\n.select-form {\n  width: 150px;\n  border: none;\n  border-radius: 5px;\n  background-color: #333;\n\n}\n</style>\n\n<script setup>\nimport {ElMessage} from \"element-plus\"\nimport {onMounted, onUpdated, reactive, ref} from \"vue\"\nimport axios from \"@/plugins/axios\"\nconst options = reactive([])\nconst selectForm = ref('')\nconst inputData = ref('')\nconst account = sessionStorage.getItem(\"Account\")\nconst accountSet = new Set()\nlet message = reactive({\n  fromWho: \"\",\n  toWho: \"\",\n  text: \"\",\n  date: new Date()\n})\nconst scrollMsg = ref('')\nconst scrollToBottom = () => {\n  // 聊天定位到底部\n  scrollMsg.value.scrollTop = scrollMsg.value.scrollHeight;\n  console.log('聊天定位到底部！');\n}\nonMounted(scrollToBottom);\nonUpdated(scrollToBottom);\nconst sendMessage = () => {\n  message.fromWho = account\n  message.text = inputData.value\n  message.toWho = selectForm.value\n  message.date = new Date()\n  if(message.toWho&&message.text) {\n    ws.send(JSON.stringify(message))\n    const msg = {sender:\"发给\"+message.toWho,time:new Date(),content: message.text,received: false}\n    messages.push(msg)\n    inputData.value = \"\"\n  }\n}\nconst messages = reactive([])\nconst ws = new WebSocket(\"ws://192.168.1.11:1113/webSocket/\"+account)\n//连接建立时\nws.onopen = function (evt){\n  console.log(\"connect\")\n  const url = \"/onlineUsers\"\n  const data = {}\n  const config = {\n    params: {\n      account: account\n    }\n  }\n  axios.post(url,data,config)\n      .then(response => {\n        const nameSet = response.data\n        if(nameSet){\n          for(let valueAccount of nameSet) {\n            const newOption = {label: valueAccount,value: valueAccount}\n            if(!accountSet.has(valueAccount)){\n              options.push(newOption)\n              accountSet.add(valueAccount)\n            }\n          }\n        }\n      })\n}\n\n//接收到服务器消息时\nws.onmessage = function (evt){\n  message = JSON.parse(evt.data)\n  if(message.fromWho==\"system_connect_open\") {\n    if(message.text!=account) {\n      ElMessage.info(message.text + \"上线了\")\n      const newOption = {label: message.text, value: message.text}\n      if (!accountSet.has(message.text)) {\n        options.push(newOption)\n      }\n      accountSet.add(message.text)\n    }\n  }else if(message.fromWho==\"system_connect_close\") {\n    ElMessage.info(message.text+\"下线了\")\n    accountSet.delete(message.text)\n    for (const option of options) {\n      const index = options.indexOf(option);\n      if (option.label === message.text) {\n        options.splice(index,1);\n        selectForm.value = \"\"\n      }\n    }\n  }else{\n    const msg = {sender:\"来自\"+message.fromWho,time:new Date(),content: message.text,received: true}\n    messages.push(msg)\n  }\n}\n//连接断开时\nws.onclose = function (evt){\n  alert(\"你已离线,请重新登录\")\n  console.log(\"close\")\n}\n//发生错误时\nws.onerror = function (evt){\n  console.log(\"error\")\n}\n\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}