{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"div\"\n}, null, -1 /* HOISTED */);\n\nexport function render(_ctx, _cache) {\n  const _component_el_input = _resolveComponent(\"el-input\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"h1\", null, _toDisplayString(_ctx.account), 1 /* TEXT */), _createElementVNode(\"h1\", null, _toDisplayString(_ctx.user), 1 /* TEXT */), _createVNode(_component_el_input, {\n    class: \"input\",\n    modelValue: _ctx.name,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.name = $event)\n  }, null, 8 /* PROPS */, [\"modelValue\"]), _hoisted_1], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_createElementVNode","id","_toDisplayString","_ctx","account","user","_createVNode","_component_el_input","class","name","$event","_hoisted_1"],"sources":["D:\\VUE\\demo\\src\\views\\ChatRoom.vue"],"sourcesContent":["<template>\r\n  <h1>{{account}}</h1>\r\n  <h1>{{user}}</h1>\r\n  <el-input class=\"input\" v-model=\"name\"  />\r\n  <div id=\"div\"></div>\r\n</template>\r\n\r\n<script setup>\r\nimport router from \"@/router/index\";\r\nimport {ElMessage} from \"element-plus\"\r\nimport {onMounted, ref} from \"vue\"\r\nconst user = ref('')\r\nconst name = ref('')\r\nconst account = sessionStorage.getItem(\"Account\")\r\nconst ws = new WebSocket(\"ws://192.168.1.11:1113/webSocket/\"+account)\r\nlet message = {\r\n  fromWho: \"\",\r\n  toWho: \"\",\r\n  text: \"\",\r\n  date: new Date()\r\n}\r\nonMounted(() => {\r\n    ws.onmessage = function (evt){\r\n    message = JSON.parse(evt.data)\r\n    if(message.fromWho==\"system_connect_open\") {\r\n      ElMessage.info(message.text+\"上线了\")\r\n      user.value = message.text\r\n      message.toWho = name.value\r\n      message.fromWho = account\r\n      message.text = \"hello\"\r\n      Element.extend(<h1>hahaha</h1>)\r\n        ws.send(JSON.stringify(message))\r\n    }\r\n    console.log(message)\r\n  }\r\n\r\n})\r\n</script>\r\n<!--<script>-->\r\n<!--const user = \"\";-->\r\n<!--export default {-->\r\n<!--  data() {-->\r\n<!--    return {-->\r\n<!--      ws: null-->\r\n<!--    }-->\r\n<!--  },-->\r\n<!--  created() {-->\r\n<!--    //连接WebSocket服务端，然后初始化监听事件-->\r\n<!--    this.ws = new WebSocket(\"ws://localhost:8080/webSocket/\"+user)-->\r\n<!--    this.wsInit()-->\r\n\r\n<!--  },-->\r\n<!--  methods: {-->\r\n<!--    wsInit() {-->\r\n<!--      this.ws.onopen = () => {-->\r\n<!--        this.ws.send(\"服务已连接\");-->\r\n<!--        console.log(\"服务器已连接\")-->\r\n<!--      }-->\r\n<!--      this.ws.onclose = () => {-->\r\n<!--        console.log(\"服务器关闭\")-->\r\n<!--      }-->\r\n<!--      this.ws.onmessage = (event) => {-->\r\n<!--        let message = JSON.parse(event.data)-->\r\n<!--        console.log(\"收到服务器消息\")-->\r\n<!--        console.log(message)-->\r\n<!--      }-->\r\n<!--      this.ws.onerror = (event) => {-->\r\n<!--        let error = JSON.parse(event.data)-->\r\n<!--        console.log(\"报错了\")-->\r\n<!--        console.log(error)-->\r\n<!--        console.log(this.ws.readyState)-->\r\n<!--      }-->\r\n\r\n<!--    }-->\r\n<!--  }-->\r\n<!--}-->\r\n<!--</script>-->"],"mappings":";gCAIEA,mBAAA,CAAoB;EAAfC,EAAE,EAAC;AAAK;;;;6DAHbD,mBAAA,CAAoB,YAAAE,gBAAA,CAAdC,IAAA,CAAAC,OAAO,kBACbJ,mBAAA,CAAiB,YAAAE,gBAAA,CAAXC,IAAA,CAAAE,IAAI,kBACVC,YAAA,CAA0CC,mBAAA;IAAhCC,KAAK,EAAC,OAAO;gBAAUL,IAAA,CAAAM,IAAI;+DAAJN,IAAA,CAAAM,IAAI,GAAAC,MAAA;2CACrCC,UAAoB,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}