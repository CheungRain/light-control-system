{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, createTextVNode as _createTextVNode, withCtx as _withCtx, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"chat-room\"\n};\nconst _hoisted_2 = {\n  class: \"user-account\"\n};\nconst _hoisted_3 = {\n  class: \"input-container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_input = _resolveComponent(\"el-input\");\n  const _component_el_button = _resolveComponent(\"el-button\");\n  const _component_el_option = _resolveComponent(\"el-option\");\n  const _component_el_select = _resolveComponent(\"el-select\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"h1\", _hoisted_2, \"当前用户: \" + _toDisplayString($setup.account), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_3, [_createVNode(_component_el_input, {\n    class: \"input\",\n    modelValue: $setup.inputData,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.inputData = $event),\n    placeholder: \"请输入要发送的消息\"\n  }, null, 8 /* PROPS */, [\"modelValue\"]), _createVNode(_component_el_button, {\n    class: \"send-button\",\n    onClick: $setup.sendMessage\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"发送\")]),\n    _: 1 /* STABLE */\n  })]), _createVNode(_component_el_select, {\n    class: \"select-form\",\n    modelValue: $setup.selectForm,\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $setup.selectForm = $event),\n    placeholder: \"选择发送人\"\n  }, {\n    default: _withCtx(() => [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.options, option => {\n      return _openBlock(), _createBlock(_component_el_option, {\n        key: option.value,\n        label: option.label,\n        value: option.value\n      }, null, 8 /* PROPS */, [\"label\", \"value\"]);\n    }), 128 /* KEYED_FRAGMENT */))]),\n\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"modelValue\"])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_toDisplayString","$setup","account","_hoisted_3","_createVNode","_component_el_input","inputData","$event","placeholder","_component_el_button","onClick","sendMessage","_component_el_select","selectForm","_Fragment","_renderList","options","option","_createBlock","_component_el_option","key","value","label"],"sources":["D:\\VUE\\demo\\src\\views\\ChatRoom.vue"],"sourcesContent":["<template>\r\n  <div class=\"chat-room\">\r\n    <h1 class=\"user-account\">当前用户: {{ account }}</h1>\r\n    <div class=\"input-container\">\r\n      <el-input class=\"input\" v-model=\"inputData\" placeholder=\"请输入要发送的消息\" />\r\n      <el-button class=\"send-button\" @click=\"sendMessage\">发送</el-button>\r\n    </div>\r\n    <el-select class=\"select-form\" v-model=\"selectForm\" placeholder=\"选择发送人\">\r\n      <el-option v-for=\"option in options\" :key=\"option.value\" :label=\"option.label\" :value=\"option.value\"></el-option>\r\n    </el-select>\r\n  </div>\r\n</template>\r\n\r\n<style>\r\nhtml, body {\r\n  height: 100%;\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n\r\n.chat-room {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: 100%;\r\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n  padding: 20px;\r\n}\r\n\r\n.user-account {\r\n  color: #fff;\r\n  background-color: #2c3e50;\r\n  padding: 10px;\r\n  border-radius: 5px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.input-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.input {\r\n  width: 400px; /* 增大输入框宽度 */\r\n  height: 80px; /* 增大输入框高度 */\r\n  font-family: Arial, sans-serif; /* 设置字体样式 */\r\n  font-size: 20px; /* 设置字体大小 */\r\n  border-radius: 6px; /* 设置输入框圆角 */\r\n}\r\n\r\n.send-button {\r\n  margin-left: 10px; /* 调整发送按钮与输入框的间距 */\r\n  background-color: #3498db;\r\n  color: #fff;\r\n  font-family: Arial, sans-serif; /* 设置按钮字体样式 */\r\n  font-size: 16px; /* 设置按钮字体大小 */\r\n}\r\n\r\n.select-form {\r\n  width: 200px;\r\n}\r\n\r\n.el-select-dropdown {\r\n  border-radius: 5px;\r\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);\r\n}\r\n\r\n.el-option {\r\n  background-color: #fff;\r\n  color: #333;\r\n}\r\n\r\n.el-option:hover,\r\n.el-option:hover .el-option__label,\r\n.el-option.selected .el-option__label {\r\n  background-color: #3498db;\r\n  color: #fff;\r\n}\r\n\r\n.el-option.highlighted .el-option__label {\r\n  background-color: #2980b9;\r\n  color: #fff;\r\n}\r\n</style>\r\n\r\n<script setup>\r\nimport {ElMessage} from \"element-plus\"\r\nimport {reactive, ref} from \"vue\"\r\nimport axios from \"@/plugins/axios\"\r\nconst options = reactive([])\r\nconst selectForm = ref('')\r\nconst inputData = ref('')\r\nconst account = sessionStorage.getItem(\"Account\")\r\nconst accountSet = new Set()\r\nlet message = reactive({\r\n  fromWho: \"\",\r\n  toWho: \"\",\r\n  text: \"\",\r\n  date: new Date()\r\n})\r\nconst sendMessage = () => {\r\n  message.fromWho = account\r\n  message.text = inputData.value\r\n  message.toWho = selectForm.value\r\n  message.date = new Date()\r\n  ws.send(JSON.stringify(message))\r\n  inputData.value = \"\"\r\n}\r\n\r\nconst ws = new WebSocket(\"ws://192.168.1.11:1113/webSocket/\"+account)\r\n//连接建立时\r\nws.onopen = function (evt){\r\n  console.log(\"connect\")\r\n  const url = \"/onlineUsers\"\r\n  const data = {}\r\n  const config = {\r\n    params: {\r\n      account: account\r\n    }\r\n  }\r\n  axios.post(url,data,config)\r\n      .then(response => {\r\n        const nameSet = response.data\r\n        if(nameSet){\r\n          for(let valueAccount of nameSet) {\r\n            const newOption = { label: valueAccount, value: valueAccount }\r\n            if(!accountSet.has(valueAccount)) {\r\n              options.push(newOption)\r\n            }\r\n            accountSet.add(valueAccount)\r\n          }\r\n        }\r\n      })\r\n}\r\n\r\n//接收到服务器消息时\r\nws.onmessage = function (evt){\r\n  message = JSON.parse(evt.data)\r\n  if(message.fromWho==\"system_connect_open\") {\r\n    if(message.text!=account) {\r\n      ElMessage.info(message.text + \"上线了\")\r\n      const newOption = {label: message.text, value: message.text}\r\n      if (!accountSet.has(message.text)) {\r\n        options.push(newOption)\r\n      }\r\n      accountSet.add(message.text)\r\n    }\r\n  }else if(message.fromWho==\"system_connect_close\") {\r\n    ElMessage.info(message.text+\"下线了\")\r\n    accountSet.delete(message.text)\r\n    for (const option of options) {\r\n      const index = options.indexOf(option);\r\n      if (option.label === message.text) {\r\n        options.splice(index,1);\r\n        selectForm.value = \"\"\r\n      }\r\n    }\r\n  }else{\r\n    ElMessage.info(\"来自\"+message.fromWho+\"的消息:\"+message.text)\r\n  }\r\n}\r\n//连接断开时\r\nws.onclose = function (evt){\r\n  console.log(\"close\")\r\n}\r\n//发生错误时\r\nws.onerror = function (evt){\r\n  console.log(\"error\")\r\n}\r\n</script>\r\n"],"mappings":";;EACOA,KAAK,EAAC;AAAW;;EAChBA,KAAK,EAAC;AAAc;;EACnBA,KAAK,EAAC;AAAiB;;;;;;uBAF9BC,mBAAA,CASM,OATNC,UASM,GARJC,mBAAA,CAAiD,MAAjDC,UAAiD,EAAxB,QAAM,GAAAC,gBAAA,CAAGC,MAAA,CAAAC,OAAO,kBACzCJ,mBAAA,CAGM,OAHNK,UAGM,GAFJC,YAAA,CAAsEC,mBAAA;IAA5DV,KAAK,EAAC,OAAO;gBAAUM,MAAA,CAAAK,SAAS;+DAATL,MAAA,CAAAK,SAAS,GAAAC,MAAA;IAAEC,WAAW,EAAC;2CACxDJ,YAAA,CAAkEK,oBAAA;IAAvDd,KAAK,EAAC,aAAa;IAAEe,OAAK,EAAET,MAAA,CAAAU;;sBAAa,MAAE,C,iBAAF,IAAE,E;;QAExDP,YAAA,CAEYQ,oBAAA;IAFDjB,KAAK,EAAC,aAAa;gBAAUM,MAAA,CAAAY,UAAU;+DAAVZ,MAAA,CAAAY,UAAU,GAAAN,MAAA;IAAEC,WAAW,EAAC;;sBACnD,MAAyB,E,kBAApCZ,mBAAA,CAAiHkB,SAAA,QAAAC,WAAA,CAArFd,MAAA,CAAAe,OAAO,EAAjBC,MAAM;2BAAxBC,YAAA,CAAiHC,oBAAA;QAA3EC,GAAG,EAAEH,MAAM,CAACI,KAAK;QAAGC,KAAK,EAAEL,MAAM,CAACK,KAAK;QAAGD,KAAK,EAAEJ,MAAM,CAACI"},"metadata":{},"sourceType":"module","externalDependencies":[]}