{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ElMessage } from \"element-plus\";\nimport { onMounted, onUpdated, reactive, ref } from \"vue\";\nimport axios from \"@/plugins/axios\";\nexport default {\n  __name: 'ChatRoom',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const options = reactive([]);\n    const selectForm = ref('');\n    const inputData = ref('');\n    const account = sessionStorage.getItem(\"Account\");\n    const accountSet = new Set();\n    let message = reactive({\n      fromWho: \"\",\n      toWho: \"\",\n      text: \"\",\n      date: new Date()\n    });\n    const sendMessage = () => {\n      message.fromWho = account;\n      message.text = inputData.value;\n      message.toWho = selectForm.value;\n      message.date = new Date();\n      ws.send(JSON.stringify(message));\n      const msg = {\n        sender: account,\n        time: message.date,\n        content: message.text,\n        received: false\n      };\n      messages.push(msg);\n      inputData.value = \"\";\n    };\n    const messages = reactive([]);\n    const ws = new WebSocket(\"ws://192.168.1.11:1113/webSocket/\" + account);\n    //连接建立时\n    ws.onopen = function (evt) {\n      console.log(\"connect\");\n      const url = \"/onlineUsers\";\n      const data = {};\n      const config = {\n        params: {\n          account: account\n        }\n      };\n      axios.post(url, data, config).then(response => {\n        const nameSet = response.data;\n        if (nameSet) {\n          for (let valueAccount of nameSet) {\n            const newOption = {\n              label: valueAccount,\n              value: valueAccount\n            };\n            if (!accountSet.has(valueAccount)) {\n              options.push(newOption);\n            }\n            accountSet.add(valueAccount);\n          }\n        }\n      });\n    };\n\n    //接收到服务器消息时\n    ws.onmessage = function (evt) {\n      message = JSON.parse(evt.data);\n      if (message.fromWho == \"system_connect_open\") {\n        if (message.text != account) {\n          ElMessage.info(message.text + \"上线了\");\n          const newOption = {\n            label: message.text,\n            value: message.text\n          };\n          if (!accountSet.has(message.text)) {\n            options.push(newOption);\n          }\n          accountSet.add(message.text);\n        }\n      } else if (message.fromWho == \"system_connect_close\") {\n        ElMessage.info(message.text + \"下线了\");\n        accountSet.delete(message.text);\n        for (const option of options) {\n          const index = options.indexOf(option);\n          if (option.label === message.text) {\n            options.splice(index, 1);\n            selectForm.value = \"\";\n          }\n        }\n      } else {\n        const msg = {\n          sender: message.fromWho,\n          time: message.date,\n          content: message.text,\n          received: true\n        };\n        messages.push(msg);\n      }\n    };\n    //连接断开时\n    ws.onclose = function (evt) {\n      console.log(\"close\");\n    };\n    //发生错误时\n    ws.onerror = function (evt) {\n      console.log(\"error\");\n    };\n    // 将聊天框滚动到底部\n    const scrollToBottom = () => {\n      const chatContainer = ref.chatContainer;\n      const chatContent = ref.chatContent;\n\n      // 将 chatContent 的滚动位置设置为最底部\n      chatContent.scrollTop = chatContent.scrollHeight;\n    };\n    onMounted(scrollToBottom); // 初始加载时滚动到底部\n\n    onUpdated(scrollToBottom); // 每次 messages 更新后滚动到底部\n\n    const __returned__ = {\n      options,\n      selectForm,\n      inputData,\n      account,\n      accountSet,\n      get message() {\n        return message;\n      },\n      set message(v) {\n        message = v;\n      },\n      sendMessage,\n      messages,\n      ws,\n      scrollToBottom,\n      get ElMessage() {\n        return ElMessage;\n      },\n      onMounted,\n      onUpdated,\n      reactive,\n      ref,\n      get axios() {\n        return axios;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ElMessage","onMounted","onUpdated","reactive","ref","axios","options","selectForm","inputData","account","sessionStorage","getItem","accountSet","Set","message","fromWho","toWho","text","date","Date","sendMessage","value","ws","send","JSON","stringify","msg","sender","time","content","received","messages","push","WebSocket","onopen","evt","console","log","url","data","config","params","post","then","response","nameSet","valueAccount","newOption","label","has","add","onmessage","parse","info","delete","option","index","indexOf","splice","onclose","onerror","scrollToBottom","chatContainer","chatContent","scrollTop","scrollHeight"],"sources":["D:/VUE/demo/src/views/ChatRoom.vue"],"sourcesContent":["<template>\r\n  <div class=\"chat-room\">\r\n    <div class=\"user-account\">当前用户: {{ account }}</div>\r\n    <div class=\"chat-frame\">\r\n      <div class=\"message-container\" ref=\"chatContainer\">\r\n        <div v-for=\"msg in messages\" :key=\"msg.id\" class=\"msg\" :class=\"{'received': msg.received, 'sent': !msg.received}\">\r\n          <p class=\"sender\">来自{{ msg.sender }} {{msg.time}}</p>\r\n          <p class=\"content\">{{ msg.content }}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"input-container\">\r\n      <el-input class=\"input\" v-model=\"inputData\" placeholder=\"请输入要发送的消息\" />\r\n      <el-button class=\"send-button\" @click=\"sendMessage\">发送</el-button>\r\n      <el-select class=\"select-form\" v-model=\"selectForm\" placeholder=\"选择发送人\">\r\n        <el-option v-for=\"option in options\" :key=\"option.value\" :label=\"option.label\" :value=\"option.value\" />\r\n      </el-select>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style>\r\nhtml, body {\r\n  height: 100%;\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n\r\n.chat-room {\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  min-height: 100vh;\r\n  background: linear-gradient(135deg, #66e6ea 0%, #4b74a2 100%);\r\n  background-size: cover;\r\n  padding: 20px;\r\n}\r\n\r\n.user-account {\r\n  color: #fff;\r\n  background-color: #2c3e50;\r\n  padding: 10px;\r\n  border-radius: 5px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.chat-frame{\r\n  background-color: #f6f6f6;\r\n  padding: 20px;\r\n  max-width: 100%;\r\n  //overflow-y: auto;\r\n  overflow-x: auto;\r\n}\r\n\r\n\r\n.message-container {\r\n\r\n  flex-direction: column;\r\n}\r\n\r\n.msg {\r\n  margin-bottom: 10px;\r\n  padding: 10px;\r\n  border-radius: 10px;\r\n  color: #fff;\r\n  word-wrap: break-word;\r\n}\r\n\r\n.received {\r\n  background-color: #0099ff;\r\n  align-self: flex-start;\r\n  max-width: 70%;\r\n  width: 70%;\r\n}\r\n\r\n.sent {\r\n  background-color: #4caf50;\r\n  align-self: flex-end;\r\n  margin-left: auto;\r\n  max-width: 70%;\r\n  width: 70%;\r\n}\r\n\r\n.content {\r\n  white-space: pre-wrap;\r\n}\r\n\r\n.input-container {\r\n\r\n  flex-direction: column;\r\n  align-items: center;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.input {\r\n  max-width: 100%;\r\n  font-family: Arial, sans-serif;\r\n  font-size: 20px;\r\n  border-radius: 6px;\r\n}\r\n\r\n.send-button {\r\n  margin-top: 10px;\r\n  background-color: #3498db;\r\n  color: #fff;\r\n  font-family: Arial, sans-serif;\r\n  font-size: 16px;\r\n}\r\n\r\n.select-form {\r\n  width: 200px;\r\n}\r\n</style>\r\n<script setup>\r\nimport {ElMessage} from \"element-plus\"\r\nimport {onMounted, onUpdated, reactive, ref} from \"vue\"\r\nimport axios from \"@/plugins/axios\"\r\nconst options = reactive([])\r\nconst selectForm = ref('')\r\nconst inputData = ref('')\r\nconst account = sessionStorage.getItem(\"Account\")\r\nconst accountSet = new Set()\r\nlet message = reactive({\r\n  fromWho: \"\",\r\n  toWho: \"\",\r\n  text: \"\",\r\n  date: new Date()\r\n})\r\nconst sendMessage = () => {\r\n  message.fromWho = account\r\n  message.text = inputData.value\r\n  message.toWho = selectForm.value\r\n  message.date = new Date()\r\n  ws.send(JSON.stringify(message))\r\n  const msg = {sender:account,time:message.date,content: message.text,received: false}\r\n  messages.push(msg)\r\n  inputData.value = \"\"\r\n}\r\nconst messages = reactive([])\r\nconst ws = new WebSocket(\"ws://192.168.1.11:1113/webSocket/\"+account)\r\n//连接建立时\r\nws.onopen = function (evt){\r\n  console.log(\"connect\")\r\n  const url = \"/onlineUsers\"\r\n  const data = {}\r\n  const config = {\r\n    params: {\r\n      account: account\r\n    }\r\n  }\r\n  axios.post(url,data,config)\r\n      .then(response => {\r\n        const nameSet = response.data\r\n        if(nameSet){\r\n          for(let valueAccount of nameSet) {\r\n            const newOption = { label: valueAccount, value: valueAccount }\r\n            if(!accountSet.has(valueAccount)) {\r\n              options.push(newOption)\r\n            }\r\n            accountSet.add(valueAccount)\r\n          }\r\n        }\r\n      })\r\n}\r\n\r\n//接收到服务器消息时\r\nws.onmessage = function (evt){\r\n  message = JSON.parse(evt.data)\r\n  if(message.fromWho==\"system_connect_open\") {\r\n    if(message.text!=account) {\r\n      ElMessage.info(message.text + \"上线了\")\r\n      const newOption = {label: message.text, value: message.text}\r\n      if (!accountSet.has(message.text)) {\r\n        options.push(newOption)\r\n      }\r\n      accountSet.add(message.text)\r\n    }\r\n  }else if(message.fromWho==\"system_connect_close\") {\r\n    ElMessage.info(message.text+\"下线了\")\r\n    accountSet.delete(message.text)\r\n    for (const option of options) {\r\n      const index = options.indexOf(option);\r\n      if (option.label === message.text) {\r\n        options.splice(index,1);\r\n        selectForm.value = \"\"\r\n      }\r\n    }\r\n  }else{\r\n    const msg = {sender:message.fromWho,time:message.date,content: message.text,received: true}\r\n    messages.push(msg)\r\n  }\r\n}\r\n//连接断开时\r\nws.onclose = function (evt){\r\n  console.log(\"close\")\r\n}\r\n//发生错误时\r\nws.onerror = function (evt){\r\n  console.log(\"error\")\r\n}\r\n// 将聊天框滚动到底部\r\nconst scrollToBottom = () => {\r\n  const chatContainer = ref.chatContainer;\r\n  const chatContent = ref.chatContent;\r\n\r\n  // 将 chatContent 的滚动位置设置为最底部\r\n  chatContent.scrollTop = chatContent.scrollHeight;\r\n};\r\n\r\nonMounted(scrollToBottom); // 初始加载时滚动到底部\r\n\r\nonUpdated(scrollToBottom); // 每次 messages 更新后滚动到底部\r\n</script>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}