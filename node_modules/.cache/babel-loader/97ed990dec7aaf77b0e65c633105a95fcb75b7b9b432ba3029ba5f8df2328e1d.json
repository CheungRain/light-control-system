{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, normalizeClass as _normalizeClass, resolveComponent as _resolveComponent, createVNode as _createVNode, createTextVNode as _createTextVNode, withCtx as _withCtx, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"all-con\"\n};\nconst _hoisted_2 = {\n  class: \"user-account\"\n};\nconst _hoisted_3 = {\n  class: \"msg-con\"\n};\nconst _hoisted_4 = {\n  class: \"messages\",\n  ref: \"scrollMsg\"\n};\nconst _hoisted_5 = {\n  class: \"sender\"\n};\nconst _hoisted_6 = {\n  class: \"content\"\n};\nconst _hoisted_7 = {\n  class: \"input-container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_input = _resolveComponent(\"el-input\");\n  const _component_el_button = _resolveComponent(\"el-button\");\n  const _component_el_option = _resolveComponent(\"el-option\");\n  const _component_el_select = _resolveComponent(\"el-select\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, \"当前用户: \" + _toDisplayString($setup.account), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.messages, msg => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: msg.id,\n      class: _normalizeClass([\"msg\", [msg.received ? 'received' : 'sent']])\n    }, [_createElementVNode(\"p\", _hoisted_5, _toDisplayString(msg.sender) + \"--\" + _toDisplayString(msg.time), 1 /* TEXT */), _createElementVNode(\"p\", _hoisted_6, _toDisplayString(msg.content), 1 /* TEXT */)], 2 /* CLASS */);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */)]), _createElementVNode(\"div\", _hoisted_7, [_createVNode(_component_el_input, {\n    class: \"input\",\n    modelValue: $setup.inputData,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.inputData = $event),\n    placeholder: \"请输入要发送的消息\"\n  }, null, 8 /* PROPS */, [\"modelValue\"]), _createVNode(_component_el_button, {\n    class: \"send-button\",\n    onClick: $setup.sendMessage\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"发送\")]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_el_select, {\n    class: \"select-form\",\n    modelValue: $setup.selectForm,\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $setup.selectForm = $event),\n    placeholder: \"选择发送人\"\n  }, {\n    default: _withCtx(() => [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.options, option => {\n      return _openBlock(), _createBlock(_component_el_option, {\n        key: option.value,\n        label: option.label,\n        value: option.value\n      }, null, 8 /* PROPS */, [\"label\", \"value\"]);\n    }), 128 /* KEYED_FRAGMENT */))]),\n\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"modelValue\"])])]);\n}","map":{"version":3,"names":["class","ref","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_toDisplayString","$setup","account","_hoisted_3","_hoisted_4","_Fragment","_renderList","messages","msg","key","id","_normalizeClass","received","_hoisted_5","sender","time","_hoisted_6","content","_hoisted_7","_createVNode","_component_el_input","inputData","$event","placeholder","_component_el_button","onClick","sendMessage","_component_el_select","selectForm","options","option","_createBlock","_component_el_option","value","label"],"sources":["D:\\download\\chatroom-master\\chatroom-front\\src\\views\\ChatRoom.vue"],"sourcesContent":["<template>\n  <div class=\"all-con\">\n    <div class=\"user-account\">当前用户: {{ account }}</div>\n    <div class=\"msg-con\">\n      <div class=\"messages\" ref=\"scrollMsg\">\n        <div v-for=\"msg in messages\" :key=\"msg.id\" class=\"msg\" :class=\"[msg.received ? 'received' : 'sent']\">\n          <p class=\"sender\">{{ msg.sender }}--{{ msg.time }}</p>\n          <p class=\"content\">{{ msg.content }}</p>\n        </div>\n      </div>\n    </div>\n    <div class=\"input-container\">\n      <el-input class=\"input\" v-model=\"inputData\" placeholder=\"请输入要发送的消息\" />\n      <el-button class=\"send-button\" @click=\"sendMessage\">发送</el-button>\n      <el-select class=\"select-form\" v-model=\"selectForm\" placeholder=\"选择发送人\">\n        <el-option v-for=\"option in options\" :key=\"option.value\" :label=\"option.label\" :value=\"option.value\" />\n      </el-select>\n    </div>\n  </div>\n</template>\n\n<style>\n.all-con{\n}\n.user-account {\n  font-size: 24px;\n  font-weight: bold;\n  background-color: #4b7ba2;\n  color: white;\n}\n\n.messages {\n  overflow-y: auto;\n  max-height:350px;\n  padding: 10px;\n}\n.msg-con{\n  height: 350px;\n}\n.msg {\n  background-color: #0099ff;\n  border-radius: 15px;\n  margin-bottom: 10px;\n}\n.received {\n  background-color: #0099ff;\n  align-self: flex-start;\n  margin-right: auto;\n  width: 50%;\n  max-width: 100%;\n  word-wrap: break-word;\n}\n\n.sent {\n  background-color: #4caf68;\n  align-self: flex-start;\n  margin-left: auto;\n  width: 50%;\n  max-width: 100%;\n  word-wrap: break-word;\n}\n.sender {\n  font-size: 12px;\n  font-weight: bold;\n  color: #a24b62;\n  margin: 0 0 5px;\n}\n\n.content {\n  font-size: 14px;\n  line-height: 1.5;\n  margin: 5px 0;\n}\n\n.input-container {\n  /*display: flex;*/\n  align-items: center;\n  gap: 10px;\n  margin-top: 20px;\n}\n\n.input {\n  flex: 1;\n}\n.input:hover{\n  background-color: rgba(102, 234, 223, 0.77);\n}\n.send-button {\n  width: 80px;\n  background-color: #ff4081;\n\n  border: none;\n  border-radius: 5px;\n}\n\n.select-form {\n  width: 150px;\n  border: none;\n  border-radius: 5px;\n  background-color: #333;\n\n}\n</style>\n\n<script setup>\nimport {ElMessage} from \"element-plus\"\nimport {onMounted, onUpdated, reactive, ref} from \"vue\"\nimport axios from \"@/plugins/axios\"\nconst options = reactive([])\nconst selectForm = ref('')\nconst inputData = ref('')\nconst account = sessionStorage.getItem(\"Account\")\nconst accountSet = new Set()\nlet message = reactive({\n  fromWho: \"\",\n  toWho: \"\",\n  text: \"\",\n  date: new Date()\n})\nconst scrollMsg = ref('')\nconst scrollToBottom = () => {\n  // 聊天定位到底部\n  scrollMsg.value.scrollTop = scrollMsg.value.scrollHeight;\n  console.log('聊天定位到底部！');\n}\nonMounted(scrollToBottom);\nonUpdated(scrollToBottom);\nconst sendMessage = () => {\n  message.fromWho = account\n  message.text = inputData.value\n  message.toWho = selectForm.value\n  message.date = new Date()\n  if(message.toWho&&message.text) {\n    ws.send(JSON.stringify(message))\n    const msg = {sender:\"发给\"+message.toWho,time:new Date(),content: message.text,received: false}\n    messages.push(msg)\n    inputData.value = \"\"\n  }\n}\nconst messages = reactive([])\nconst ws = new WebSocket(\"ws://192.168.1.11:1113/webSocket/\"+account)\n//连接建立时\nws.onopen = function (evt){\n  console.log(\"connect\")\n  const url = \"/onlineUsers\"\n  const data = {}\n  const config = {\n    params: {\n      account: account\n    }\n  }\n  axios.post(url,data,config)\n      .then(response => {\n        const nameSet = response.data\n        if(nameSet){\n          for(let valueAccount of nameSet) {\n            const newOption = {label: valueAccount,value: valueAccount}\n            if(!accountSet.has(valueAccount)){\n              options.push(newOption)\n              accountSet.add(valueAccount)\n            }\n          }\n        }\n      })\n}\n\n//接收到服务器消息时\nws.onmessage = function (evt){\n  message = JSON.parse(evt.data)\n  if(message.fromWho==\"system_connect_open\") {\n    if(message.text!=account) {\n      ElMessage.info(message.text + \"上线了\")\n      const newOption = {label: message.text, value: message.text}\n      if (!accountSet.has(message.text)) {\n        options.push(newOption)\n      }\n      accountSet.add(message.text)\n    }\n  }else if(message.fromWho==\"system_connect_close\") {\n    ElMessage.info(message.text+\"下线了\")\n    accountSet.delete(message.text)\n    for (const option of options) {\n      const index = options.indexOf(option);\n      if (option.label === message.text) {\n        options.splice(index,1);\n        selectForm.value = \"\"\n      }\n    }\n  }else{\n    const msg = {sender:\"来自\"+message.fromWho,time:new Date(),content: message.text,received: true}\n    messages.push(msg)\n  }\n}\n//连接断开时\nws.onclose = function (evt){\n  alert(\"你已离线,请重新登录\")\n  console.log(\"close\")\n}\n//发生错误时\nws.onerror = function (evt){\n  console.log(\"error\")\n}\n\n</script>\n"],"mappings":";;EACOA,KAAK,EAAC;AAAS;;EACbA,KAAK,EAAC;AAAc;;EACpBA,KAAK,EAAC;AAAS;;EACbA,KAAK,EAAC,UAAU;EAACC,GAAG,EAAC;;;EAEnBD,KAAK,EAAC;AAAQ;;EACdA,KAAK,EAAC;AAAS;;EAInBA,KAAK,EAAC;AAAiB;;;;;;uBAV9BE,mBAAA,CAiBM,OAjBNC,UAiBM,GAhBJC,mBAAA,CAAmD,OAAnDC,UAAmD,EAAzB,QAAM,GAAAC,gBAAA,CAAGC,MAAA,CAAAC,OAAO,kBAC1CJ,mBAAA,CAOM,OAPNK,UAOM,GANJL,mBAAA,CAKM,OALNM,UAKM,I,kBAJJR,mBAAA,CAGMS,SAAA,QAAAC,WAAA,CAHaL,MAAA,CAAAM,QAAQ,EAAfC,GAAG;yBAAfZ,mBAAA,CAGM;MAHwBa,GAAG,EAAED,GAAG,CAACE,EAAE;MAAEhB,KAAK,EAAAiB,eAAA,EAAC,KAAK,GAAUH,GAAG,CAACI,QAAQ;QAC1Ed,mBAAA,CAAsD,KAAtDe,UAAsD,EAAAb,gBAAA,CAAjCQ,GAAG,CAACM,MAAM,IAAG,IAAE,GAAAd,gBAAA,CAAGQ,GAAG,CAACO,IAAI,kBAC/CjB,mBAAA,CAAwC,KAAxCkB,UAAwC,EAAAhB,gBAAA,CAAlBQ,GAAG,CAACS,OAAO,iB;4DAIvCnB,mBAAA,CAMM,OANNoB,UAMM,GALJC,YAAA,CAAsEC,mBAAA;IAA5D1B,KAAK,EAAC,OAAO;gBAAUO,MAAA,CAAAoB,SAAS;+DAATpB,MAAA,CAAAoB,SAAS,GAAAC,MAAA;IAAEC,WAAW,EAAC;2CACxDJ,YAAA,CAAkEK,oBAAA;IAAvD9B,KAAK,EAAC,aAAa;IAAE+B,OAAK,EAAExB,MAAA,CAAAyB;;sBAAa,MAAE,C,iBAAF,IAAE,E;;MACtDP,YAAA,CAEYQ,oBAAA;IAFDjC,KAAK,EAAC,aAAa;gBAAUO,MAAA,CAAA2B,UAAU;+DAAV3B,MAAA,CAAA2B,UAAU,GAAAN,MAAA;IAAEC,WAAW,EAAC;;sBACnD,MAAyB,E,kBAApC3B,mBAAA,CAAuGS,SAAA,QAAAC,WAAA,CAA3EL,MAAA,CAAA4B,OAAO,EAAjBC,MAAM;2BAAxBC,YAAA,CAAuGC,oBAAA;QAAjEvB,GAAG,EAAEqB,MAAM,CAACG,KAAK;QAAGC,KAAK,EAAEJ,MAAM,CAACI,KAAK;QAAGD,KAAK,EAAEH,MAAM,CAACG"},"metadata":{},"sourceType":"module","externalDependencies":[]}