{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createBlock as _createBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_button = _resolveComponent(\"el-button\");\n  const _component_el_option = _resolveComponent(\"el-option\");\n  const _component_el_select = _resolveComponent(\"el-select\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"h1\", null, _toDisplayString($setup.account), 1 /* TEXT */), _createElementVNode(\"h1\", null, _toDisplayString($setup.user), 1 /* TEXT */), _createVNode(_component_el_button, {\n    onClick: $setup.fasong\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"发送\")]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_el_select, {\n    modelValue: $setup.selectForm,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.selectForm = $event),\n    placeholder: \"选择发送人\"\n  }, {\n    default: _withCtx(() => [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.options, option => {\n      return _openBlock(), _createBlock(_component_el_option, {\n        key: option.value,\n        label: option.label,\n        value: option.value\n      }, null, 8 /* PROPS */, [\"label\", \"value\"]);\n    }), 128 /* KEYED_FRAGMENT */))]),\n\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"modelValue\"]), _createElementVNode(\"p\", null, \"来自\" + _toDisplayString($setup.sender) + \"的消息\" + _toDisplayString($setup.sendMsg), 1 /* TEXT */)], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_createElementVNode","_toDisplayString","$setup","account","user","_createVNode","_component_el_button","onClick","fasong","_component_el_select","selectForm","$event","placeholder","_createElementBlock","_Fragment","_renderList","options","option","_createBlock","_component_el_option","key","value","label","sender","sendMsg"],"sources":["D:\\VUE\\demo\\src\\views\\ChatRoom.vue"],"sourcesContent":["<template>\r\n  <h1>{{account}}</h1>\r\n  <h1>{{user}}</h1>\r\n  <el-button @click=\"fasong\">发送</el-button>\r\n  <el-select v-model=\"selectForm\" placeholder=\"选择发送人\">\r\n    <el-option v-for=\"option in options\" :key=\"option.value\" :label=\"option.label\" :value=\"option.value\"></el-option>\r\n  </el-select>\r\n  <p>来自{{sender}}的消息{{sendMsg}}</p>\r\n</template>\r\n\r\n<script setup>\r\nimport router from \"@/router/index\";\r\nimport {ElMessage} from \"element-plus\"\r\nimport {onMounted, reactive, ref} from \"vue\"\r\nimport axios from \"@/plugins/axios\";\r\nconst user = ref('')\r\nlet sender = ref('')\r\nlet sendMsg = ref('')\r\nconst options = reactive([]);\r\nconst account = sessionStorage.getItem(\"Account\")\r\nconst ws = new WebSocket(\"ws://192.168.1.11:1113/webSocket/\"+account)\r\nlet message = reactive({\r\n  fromWho: \"\",\r\n  toWho: \"\",\r\n  text: \"\",\r\n  date: new Date(),\r\n  nameSet: [\"tom\",\"john\"]\r\n})\r\nws.onopen = function (evt){\r\n  console.log(\"connect\")\r\n  const url = \"/onlineUsers\"\r\n  const data = {}\r\n  const config = {params: {}}\r\n  axios.post(url,data,config)\r\n      .then(response => {\r\n        console.log(JSON.parse(response.data))\r\n      })\r\n}\r\nconst selectForm = ref('')\r\nconst addOption = () => {\r\n  const newOption = { label: '新选项', value: 'newOption' };\r\n  options.push(newOption);\r\n  options.forEach((option, index) => {\r\n    if (option.label === \"选项1\") {\r\n      options.splice(index, 1);\r\n      selectForm.value = \"\"\r\n    }\r\n  });\r\n};\r\nconst fasong = () => {\r\n  message.fromWho = account\r\n  message.text = \"hello\"\r\n  message.toWho = selectForm.value\r\n  message.date = new Date()\r\n  ws.send(JSON.stringify(message))\r\n  //console.log(message)\r\n}\r\nws.onmessage = function (evt){\r\n  message = JSON.parse(evt.data)\r\n  //message.nameSet = JSON.parse(evt.data.nameSet)\r\n  //console.log(evt.data)\r\n  // sender = message.fromWho\r\n  // sendMsg = message.text\r\n  if(message.fromWho==\"system_connect_open\") {\r\n    ElMessage.info(message.text+\"上线了\")\r\n    // for(let valueAccount of message.nameSet) {\r\n    //   const newOption = { label: valueAccount, value: valueAccount }\r\n    //   options.push(newOption)\r\n    // }\r\n  }\r\n  if(message.fromWho==\"system_connect_close\") {\r\n    ElMessage.info(message.text+\"下线了\")\r\n  //   for (const option of options) {\r\n  //     const index = options.indexOf(option);\r\n  //     if (option.label === message.text) {\r\n  //       options.splice(index, 1);\r\n  //       selectForm.value = \"\"\r\n  //     }\r\n  //   }\r\n  }\r\n}\r\nws.onclose = function (evt){\r\n  console.log(\"close\")\r\n}\r\n</script>\r\n"],"mappings":";;;;;6DACEA,mBAAA,CAAoB,YAAAC,gBAAA,CAAdC,MAAA,CAAAC,OAAO,kBACbH,mBAAA,CAAiB,YAAAC,gBAAA,CAAXC,MAAA,CAAAE,IAAI,kBACVC,YAAA,CAAyCC,oBAAA;IAA7BC,OAAK,EAAEL,MAAA,CAAAM;EAAM;sBAAE,MAAE,C,iBAAF,IAAE,E;;MAC7BH,YAAA,CAEYI,oBAAA;gBAFQP,MAAA,CAAAQ,UAAU;+DAAVR,MAAA,CAAAQ,UAAU,GAAAC,MAAA;IAAEC,WAAW,EAAC;;sBAC/B,MAAyB,E,kBAApCC,mBAAA,CAAiHC,SAAA,QAAAC,WAAA,CAArFb,MAAA,CAAAc,OAAO,EAAjBC,MAAM;2BAAxBC,YAAA,CAAiHC,oBAAA;QAA3EC,GAAG,EAAEH,MAAM,CAACI,KAAK;QAAGC,KAAK,EAAEL,MAAM,CAACK,KAAK;QAAGD,KAAK,EAAEJ,MAAM,CAACI;;;;;qCAEhGrB,mBAAA,CAAiC,WAA9B,IAAE,GAAAC,gBAAA,CAAEC,MAAA,CAAAqB,MAAM,IAAE,KAAG,GAAAtB,gBAAA,CAAEC,MAAA,CAAAsB,OAAO,iB"},"metadata":{},"sourceType":"module","externalDependencies":[]}