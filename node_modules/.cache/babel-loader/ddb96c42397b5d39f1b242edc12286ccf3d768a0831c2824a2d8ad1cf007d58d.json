{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"container\"\n}, null, -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"h1\", null, _toDisplayString($setup.account), 1 /* TEXT */), _hoisted_1], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_createElementVNode","class","_toDisplayString","$setup","account","_hoisted_1"],"sources":["D:\\VUE\\demo\\src\\views\\ChatRoom.vue"],"sourcesContent":["<template>\r\n  <h1>{{account}}</h1>\r\n  <div class=\"container\"></div>\r\n</template>\r\n\r\n<script setup>\r\nimport router from \"@/router/index\";\r\nimport {ElMessage} from \"element-plus\";\r\nconst account = sessionStorage.getItem(\"Account\")\r\nconst ws = new WebSocket(\"ws://localhost:1113/webSocket/\"+account)\r\nlet text;\r\nlet message = {\r\n  fromWho: \"\",\r\n  toWho: text,\r\n  text:\"hello\",\r\n  date: new Date()\r\n}\r\nif(account==null){\r\n  ElMessage.error(\"请登录\")\r\n  router.push('/login')\r\n}\r\nws.onopen = function (evt){\r\n  console.log(\"connect\")\r\n  text = \"tom\";\r\n  message.toWho=text\r\n  ws.send(JSON.stringify(message))\r\n}\r\nws.onmessage = function (evt){\r\n  let msg = JSON.parse(evt.data)\r\n  console.log(msg)\r\n}\r\nws.onclose = function (evt){\r\n\r\n}\r\n\r\n</script>\r\n<!--<script>-->\r\n<!--const user = \"\";-->\r\n<!--export default {-->\r\n<!--  data() {-->\r\n<!--    return {-->\r\n<!--      ws: null-->\r\n<!--    }-->\r\n<!--  },-->\r\n<!--  created() {-->\r\n<!--    //连接WebSocket服务端，然后初始化监听事件-->\r\n<!--    this.ws = new WebSocket(\"ws://localhost:8080/webSocket/\"+user)-->\r\n<!--    this.wsInit()-->\r\n\r\n<!--  },-->\r\n<!--  methods: {-->\r\n<!--    wsInit() {-->\r\n<!--      this.ws.onopen = () => {-->\r\n<!--        this.ws.send(\"服务已连接\");-->\r\n<!--        console.log(\"服务器已连接\")-->\r\n<!--      }-->\r\n<!--      this.ws.onclose = () => {-->\r\n<!--        console.log(\"服务器关闭\")-->\r\n<!--      }-->\r\n<!--      this.ws.onmessage = (event) => {-->\r\n<!--        let message = JSON.parse(event.data)-->\r\n<!--        console.log(\"收到服务器消息\")-->\r\n<!--        console.log(message)-->\r\n<!--      }-->\r\n<!--      this.ws.onerror = (event) => {-->\r\n<!--        let error = JSON.parse(event.data)-->\r\n<!--        console.log(\"报错了\")-->\r\n<!--        console.log(error)-->\r\n<!--        console.log(this.ws.readyState)-->\r\n<!--      }-->\r\n\r\n<!--    }-->\r\n<!--  }-->\r\n<!--}-->\r\n<!--</script>-->"],"mappings":";gCAEEA,mBAAA,CAA6B;EAAxBC,KAAK,EAAC;AAAW;;;6DADtBD,mBAAA,CAAoB,YAAAE,gBAAA,CAAdC,MAAA,CAAAC,OAAO,kBACbC,UAA6B,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}