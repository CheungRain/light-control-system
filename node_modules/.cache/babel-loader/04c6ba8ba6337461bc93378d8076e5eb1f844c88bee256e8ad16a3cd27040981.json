{"ast":null,"code":"import { createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_button = _resolveComponent(\"el-button\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_el_button, {\n    type: \"button\",\n    onClick: $setup.startRecordAudio\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"开始录音\")]),\n    _: 1 /* STABLE */\n  }), _createElementVNode(\"h3\", null, \"录音时长：\" + _toDisplayString($setup.recorder.duration.toFixed(4)), 1 /* TEXT */), _hoisted_1, _createVNode(_component_el_button, {\n    type: \"button\",\n    onClick: $setup.stopRecordAudio\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"停止录音\")]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_el_button, {\n    type: \"button\",\n    onClick: $setup.playRecordAudio\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"播放录音\")]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_el_button, {\n    type: \"button\",\n    onClick: $setup.uploadWAVData\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"上传WAV录音数据\")]),\n    _: 1 /* STABLE */\n  }), _hoisted_2]);\n}","map":{"version":3,"names":["_createElementVNode","_createElementBlock","_createVNode","_component_el_button","type","onClick","$setup","startRecordAudio","_toDisplayString","recorder","duration","toFixed","_hoisted_1","stopRecordAudio","playRecordAudio","uploadWAVData","_hoisted_2"],"sources":["D:\\javafile\\LightControl\\src\\views\\IndexPage.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <el-button type=\"button\" @click=\"startRecordAudio\">开始录音</el-button>\r\n    <h3>录音时长：{{ recorder.duration.toFixed(4) }}</h3>\r\n    <br />\r\n    <el-button type=\"button\" @click=\"stopRecordAudio\">停止录音</el-button>\r\n    <el-button type=\"button\" @click=\"playRecordAudio\">播放录音</el-button>\r\n    <el-button type=\"button\" @click=\"uploadWAVData\">上传WAV录音数据</el-button>\r\n    <br />\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport Recorder from \"js-audio-recorder\";\r\nimport axios from \"axios\";\r\n\r\nconst recorder = new Recorder({\r\n  sampleBits: 16,\r\n  sampleRate: 16000,\r\n  numChannels: 1,\r\n});\r\n\r\nconst startRecordAudio = () => {\r\n  console.log(\"开始录音\")\r\n  recorder.start()\r\n};\r\n\r\nconst stopRecordAudio = () => {\r\n  console.log(\"停止录音\");\r\n  recorder.stop();\r\n};\r\n\r\nconst playRecordAudio = () => {\r\n  console.log(\"播放录音\");\r\n  recorder.play();\r\n};\r\n\r\nconst uploadWAVData = (event) => {\r\n  const file = recorder.getPCMBlob();\r\n  const file_len = file.size;\r\n  blobToBase64(file, (base64String) => {\r\n    const base64 = base64String;\r\n    const token = '24.19950bee43802d550f29b4d12c5015e3.2592000.1702287353.282335-42750245'\r\n    const format = 'pcm';\r\n    const rate = 16000;\r\n    const channel = 1;\r\n    const cuid = '5Bg3dVi0WNfWISubL00qxugrCQX5q5NN';\r\n    const dev_pid =  1537;\r\n    const speech = base64;\r\n    const len = file_len;\r\n    const url = 'api0/server_api'\r\n    const data = {\r\n      token: token,\r\n      format: format,\r\n      rate: rate,\r\n      channel: channel,\r\n      cuid: cuid,\r\n      dev_pid: dev_pid,\r\n      speech: speech,\r\n      len: len\r\n    };\r\n    const config = {\r\n      params: data\r\n    }\r\n    // axios.post(url, data, config).then(response => {\r\n    //   console.log(\"res\"+response.data.result)\r\n    // })\r\n  });\r\n};\r\n\r\nconst blobToBase64 = (blob, callback) => {\r\n  const reader = new FileReader();\r\n  reader.onload = function (result) {\r\n    const base64String = window.btoa(\r\n        String.fromCharCode(...new Uint8Array(result.target.result))\r\n    );\r\n    callback(base64String);\r\n  };\r\n  reader.readAsArrayBuffer(blob);\r\n};\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n</style>"],"mappings":";gCAIIA,mBAAA,CAAM;gCAINA,mBAAA,CAAM;;;;uBAPRC,mBAAA,CAQM,cAPJC,YAAA,CAAmEC,oBAAA;IAAxDC,IAAI,EAAC,QAAQ;IAAEC,OAAK,EAAEC,MAAA,CAAAC;;sBAAkB,MAAI,C,iBAAJ,MAAI,E;;MACvDP,mBAAA,CAAgD,YAA5C,OAAK,GAAAQ,gBAAA,CAAGF,MAAA,CAAAG,QAAQ,CAACC,QAAQ,CAACC,OAAO,qBACrCC,UAAM,EACNV,YAAA,CAAkEC,oBAAA;IAAvDC,IAAI,EAAC,QAAQ;IAAEC,OAAK,EAAEC,MAAA,CAAAO;;sBAAiB,MAAI,C,iBAAJ,MAAI,E;;MACtDX,YAAA,CAAkEC,oBAAA;IAAvDC,IAAI,EAAC,QAAQ;IAAEC,OAAK,EAAEC,MAAA,CAAAQ;;sBAAiB,MAAI,C,iBAAJ,MAAI,E;;MACtDZ,YAAA,CAAqEC,oBAAA;IAA1DC,IAAI,EAAC,QAAQ;IAAEC,OAAK,EAAEC,MAAA,CAAAS;;sBAAe,MAAS,C,iBAAT,WAAS,E;;MACzDC,UAAM,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}