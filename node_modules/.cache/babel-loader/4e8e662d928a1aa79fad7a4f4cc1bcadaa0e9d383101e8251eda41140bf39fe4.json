{"ast":null,"code":"import axios from 'axios';\nimport router from \"@/router/index\";\nimport * as ElementUI from \"@element-plus/icons-vue\";\n\n// const request = axios.create({\n//     baseURL: `http://localhost:1113`,\n//     timeout: 30000,\n// })\n// // http request拦截器 添加一个请求拦截器\n// axios.interceptors.request.use(function (config) {\n//     // Do something before request is sent\n//     //window.localStorage.getItem(\"accessToken\") 获取token的value\n//     let token = window.localStorage.getItem(\"Authorization\")\n//     if (token) {\n//         //将token放到请求头发送给服务器,将tokenkey放在请求头中\n//         config.headers.Authorization = token;\n//         //也可以这种写法\n//         // config.headers['accessToken'] = Token;\n//         return config;\n//     }\n// }, function (error) {\n//     // Do something with request error\n//     return Promise.reject(error);\n// });\n\n// // response 拦截器\n// // 可以在接口响应后统一处理结果\n// request.interceptors.response.use(\n//     response => {\n//         let res = response.data;\n//         // 如果是返回的文件\n//         if (response.config.responseType === 'blob') {\n//             return res\n//         }\n//         // 兼容服务端返回的字符串数据\n//         if (typeof res === 'string') {\n//             res = res ? JSON.parse(res) : res\n//         }\n//         // 当权限验证不通过的时候给出提示\n//         if (res.code === 401) {\n//             ElementUI.Message({\n//                 message: res.msg,\n//                 type: 'error'\n//             });\n//             router.push(\"/login\")\n//         }\n//         return res;\n//     },\n//     error => {\n//         console.log('err' + error) // for debug\n//         return Promise.reject(error)\n//     }\n// )\naxios.defaults.timeout = 5000; //超市时间是5秒\naxios.defaults.withCredentials = true; //允许跨域\n//Content-Type 响应头\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded;charset=UTF-8';\n//基础url\naxios.defaults.baseURL = \"http://localhost:1113\";\n// axios.defaults.headers.common['Authorization'] = localStorage.token\n// axios.defaults.headers.common['token'] = localStorage.token\n\n//请求拦截器\naxios.interceptors.request.use(config => {\n  //先从浏览器的回话存储中提取token值\n  const tokenStr = localStorage.getItem('Authorization');\n  if (tokenStr) {\n    config.headers.Authorization = tokenStr;\n  }\n  return config;\n});\n//响应拦截器\naxios.interceptors.response.use(response => {\n  //如果reponse里面的status是200，说明访问到接口了，否则错误\n  console.log(response);\n  // if (response.data.state==false){\n  //   // alert(\"账号信息已过期，请重新登录\");\n  //   location.href = '/'\n  //   localStorage.removeItem(\"token\");\n  // }\n  if (response.status == 200) {\n    return Promise.resolve(response);\n  } else {\n    return Promise.reject(response);\n  }\n}, error => {\n  if (error.response.status) {\n    console.log(error);\n    switch (error.response.status) {\n      case 401:\n        //未登录\n        router.replace({\n          path: '/',\n          query: {\n            redirect: router.currentRoute.fullPath\n          }\n        });\n        break;\n      case 404:\n        //没找到\n        break;\n    }\n    return Promise.reject(error.response);\n  }\n});","map":{"version":3,"names":["axios","router","ElementUI","defaults","timeout","withCredentials","headers","post","baseURL","interceptors","request","use","config","tokenStr","localStorage","getItem","Authorization","response","console","log","status","Promise","resolve","reject","error","replace","path","query","redirect","currentRoute","fullPath"],"sources":["D:/VUE/demo/src/plugins/axios.js"],"sourcesContent":["import axios from 'axios'\r\nimport router from \"@/router/index\";\r\nimport * as ElementUI from \"@element-plus/icons-vue\";\r\n\r\n// const request = axios.create({\r\n//     baseURL: `http://localhost:1113`,\r\n//     timeout: 30000,\r\n// })\r\n// // http request拦截器 添加一个请求拦截器\r\n// axios.interceptors.request.use(function (config) {\r\n//     // Do something before request is sent\r\n//     //window.localStorage.getItem(\"accessToken\") 获取token的value\r\n//     let token = window.localStorage.getItem(\"Authorization\")\r\n//     if (token) {\r\n//         //将token放到请求头发送给服务器,将tokenkey放在请求头中\r\n//         config.headers.Authorization = token;\r\n//         //也可以这种写法\r\n//         // config.headers['accessToken'] = Token;\r\n//         return config;\r\n//     }\r\n// }, function (error) {\r\n//     // Do something with request error\r\n//     return Promise.reject(error);\r\n// });\r\n\r\n\r\n// // response 拦截器\r\n// // 可以在接口响应后统一处理结果\r\n// request.interceptors.response.use(\r\n//     response => {\r\n//         let res = response.data;\r\n//         // 如果是返回的文件\r\n//         if (response.config.responseType === 'blob') {\r\n//             return res\r\n//         }\r\n//         // 兼容服务端返回的字符串数据\r\n//         if (typeof res === 'string') {\r\n//             res = res ? JSON.parse(res) : res\r\n//         }\r\n//         // 当权限验证不通过的时候给出提示\r\n//         if (res.code === 401) {\r\n//             ElementUI.Message({\r\n//                 message: res.msg,\r\n//                 type: 'error'\r\n//             });\r\n//             router.push(\"/login\")\r\n//         }\r\n//         return res;\r\n//     },\r\n//     error => {\r\n//         console.log('err' + error) // for debug\r\n//         return Promise.reject(error)\r\n//     }\r\n// )\r\naxios.defaults.timeout = 5000;  //超市时间是5秒\r\naxios.defaults.withCredentials = true;  //允许跨域\r\n//Content-Type 响应头\r\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded;charset=UTF-8';\r\n//基础url\r\naxios.defaults.baseURL = \"http://localhost:1113\";\r\n// axios.defaults.headers.common['Authorization'] = localStorage.token\r\n// axios.defaults.headers.common['token'] = localStorage.token\r\n\r\n//请求拦截器\r\naxios.interceptors.request.use(\r\n    config => {\r\n        //先从浏览器的回话存储中提取token值\r\n        const tokenStr = localStorage.getItem('Authorization')\r\n        if (tokenStr) {\r\n            config.headers.Authorization=tokenStr\r\n        }\r\n        return config\r\n    })\r\n//响应拦截器\r\naxios.interceptors.response.use(\r\n    response => {\r\n        //如果reponse里面的status是200，说明访问到接口了，否则错误\r\n        console.log(response);\r\n        // if (response.data.state==false){\r\n        //   // alert(\"账号信息已过期，请重新登录\");\r\n        //   location.href = '/'\r\n        //   localStorage.removeItem(\"token\");\r\n        // }\r\n        if(response.status == 200){\r\n            return Promise.resolve(response);\r\n        }else{\r\n            return Promise.reject(response);\r\n        }\r\n\r\n    },\r\n    error => {\r\n        if(error.response.status){\r\n            console.log(error);\r\n            switch(error.response.status){\r\n                case 401:       //未登录\r\n                    router.replace({\r\n                        path:'/',\r\n                        query:{\r\n                            redirect: router.currentRoute.fullPath\r\n                        }\r\n                    });\r\n                    break;\r\n                case 404:   //没找到\r\n                    break;\r\n            }\r\n            return Promise.reject(error.response);\r\n        }\r\n    }\r\n);"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,gBAAgB;AACnC,OAAO,KAAKC,SAAS,MAAM,yBAAyB;;AAEpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAF,KAAK,CAACG,QAAQ,CAACC,OAAO,GAAG,IAAI,CAAC,CAAE;AAChCJ,KAAK,CAACG,QAAQ,CAACE,eAAe,GAAG,IAAI,CAAC,CAAE;AACxC;AACAL,KAAK,CAACG,QAAQ,CAACG,OAAO,CAACC,IAAI,CAAC,cAAc,CAAC,GAAG,iDAAiD;AAC/F;AACAP,KAAK,CAACG,QAAQ,CAACK,OAAO,GAAG,uBAAuB;AAChD;AACA;;AAEA;AACAR,KAAK,CAACS,YAAY,CAACC,OAAO,CAACC,GAAG,CAC1BC,MAAM,IAAI;EACN;EACA,MAAMC,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC;EACtD,IAAIF,QAAQ,EAAE;IACVD,MAAM,CAACN,OAAO,CAACU,aAAa,GAACH,QAAQ;EACzC;EACA,OAAOD,MAAM;AACjB,CAAC,CAAC;AACN;AACAZ,KAAK,CAACS,YAAY,CAACQ,QAAQ,CAACN,GAAG,CAC3BM,QAAQ,IAAI;EACR;EACAC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;EACrB;EACA;EACA;EACA;EACA;EACA,IAAGA,QAAQ,CAACG,MAAM,IAAI,GAAG,EAAC;IACtB,OAAOC,OAAO,CAACC,OAAO,CAACL,QAAQ,CAAC;EACpC,CAAC,MAAI;IACD,OAAOI,OAAO,CAACE,MAAM,CAACN,QAAQ,CAAC;EACnC;AAEJ,CAAC,EACDO,KAAK,IAAI;EACL,IAAGA,KAAK,CAACP,QAAQ,CAACG,MAAM,EAAC;IACrBF,OAAO,CAACC,GAAG,CAACK,KAAK,CAAC;IAClB,QAAOA,KAAK,CAACP,QAAQ,CAACG,MAAM;MACxB,KAAK,GAAG;QAAQ;QACZnB,MAAM,CAACwB,OAAO,CAAC;UACXC,IAAI,EAAC,GAAG;UACRC,KAAK,EAAC;YACFC,QAAQ,EAAE3B,MAAM,CAAC4B,YAAY,CAACC;UAClC;QACJ,CAAC,CAAC;QACF;MACJ,KAAK,GAAG;QAAI;QACR;IACR;IACA,OAAOT,OAAO,CAACE,MAAM,CAACC,KAAK,CAACP,QAAQ,CAAC;EACzC;AACJ,CACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}