{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, normalizeClass as _normalizeClass } from \"vue\";\nconst _hoisted_1 = {\n  class: \"chat-room\"\n};\nconst _hoisted_2 = {\n  class: \"message-container\"\n};\nconst _hoisted_3 = {\n  class: \"content\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.messages, message => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: message.id,\n      class: _normalizeClass([\"message\", {\n        'received': message.received,\n        'sent': !message.received\n      }])\n    }, [_createElementVNode(\"p\", _hoisted_3, _toDisplayString(message.content), 1 /* TEXT */)], 2 /* CLASS */);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_Fragment","_renderList","$setup","messages","message","key","id","_normalizeClass","received","_hoisted_3","_toDisplayString","content"],"sources":["D:\\VUE\\demo\\src\\views\\ChatRoom.vue"],"sourcesContent":["<template>\r\n  <div class=\"chat-room\">\r\n    <div class=\"message-container\">\r\n      <div v-for=\"message in messages\" :key=\"message.id\" class=\"message\" :class=\"{'received': message.received, 'sent': !message.received}\">\r\n        <p class=\"content\">{{ message.content }}</p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style>\r\n.chat-room {\r\n  background-color: #f6f6f6;\r\n  padding: 20px;\r\n  max-width: 100%;\r\n  border: 5px solid red;\r\n}\r\n\r\n.message-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  /*overflow-y: auto;*/\r\n  /*overflow-x: hidden;*/\r\n}\r\n\r\n.message {\r\n  margin-bottom: 10px;\r\n  padding: 10px;\r\n  border-radius: 10px;\r\n  color: #fff;\r\n  word-wrap: break-word;\r\n  overflow-y: auto;\r\n  overflow-x: hidden;\r\n}\r\n\r\n.received {\r\n  background-color: #0099ff;\r\n  align-self: flex-start;\r\n  width: 70%;\r\n  max-width: 300px;\r\n}\r\n\r\n.sent {\r\n  background-color: #4caf50;\r\n  align-self: flex-end;\r\n  margin-left: auto;\r\n  width: 70%;\r\n  max-width: 300px;\r\n}\r\n\r\n.content {\r\n  white-space: pre-wrap;\r\n}\r\n</style>\r\n\r\n<script setup>\r\nimport { reactive } from 'vue';\r\n\r\nconst messages = reactive([\r\n  { id: 1, content: 'Hello', received: true },\r\n  { id: 2, content: 'Hi, this is a longer message that will automatically increase the height of the chat bubble as the content grows.', received: false },\r\n  { id: 3, content: 'Hello', received: false },\r\n  { id: 4, content: 'Hi, this is a longer message that will automatically increase the height of the chat bubble as the content grows.', received: true },\r\n  { id: 1, content: 'Hello', received: true },\r\n  { id: 2, content: 'Hi, this is a longer message that will automatically increase the height of the chat bubble as the content grows.', received: false },\r\n]);\r\n</script>"],"mappings":";;EACOA,KAAK,EAAC;AAAW;;EACfA,KAAK,EAAC;AAAmB;;EAEvBA,KAAK,EAAC;AAAS;;uBAHxBC,mBAAA,CAMM,OANNC,UAMM,GALJC,mBAAA,CAIM,OAJNC,UAIM,I,kBAHJH,mBAAA,CAEMI,SAAA,QAAAC,WAAA,CAFiBC,MAAA,CAAAC,QAAQ,EAAnBC,OAAO;yBAAnBR,mBAAA,CAEM;MAF4BS,GAAG,EAAED,OAAO,CAACE,EAAE;MAAEX,KAAK,EAAAY,eAAA,EAAC,SAAS;QAAA,YAAsBH,OAAO,CAACI,QAAQ;QAAA,SAAWJ,OAAO,CAACI;MAAQ;QACjIV,mBAAA,CAA4C,KAA5CW,UAA4C,EAAAC,gBAAA,CAAtBN,OAAO,CAACO,OAAO,iB"},"metadata":{},"sourceType":"module","externalDependencies":[]}